---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.15.0
  name: backends.gateway.envoyproxy.io
spec:
  group: gateway.envoyproxy.io
  names:
    categories:
    - envoy-gateway
    kind: Backend
    listKind: BackendList
    plural: backends
    shortNames:
    - be
    singular: backend
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=="Accepted")].reason
      name: Status
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: |-
          Backend allows the user to configure the behavior of the connection
          between the Envoy Proxy listener and the backend service.
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: spec defines the desired state of Backend.
            properties:
              addresses:
                items:
                  description: |-
                    BackendAddress describes are backend address, which is can be either a TCP/UDP socket or a Unix Domain Socket
                    corresponding to Envoy's Address: https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/address.proto#config-core-v3-address
                  properties:
                    socketAddress:
                      description: SocketAddress defines a FQDN or IPv4 address
                      properties:
                        address:
                          description: Address defines to the FQDN or IP address of
                            the backend service.
                          type: string
                        port:
                          description: Port defines to the port of of the backend
                            service.
                          format: int32
                          type: integer
                        protocol:
                          description: Protocol defines to the the transport protocol
                            to use for communication with the backend.
                          enum:
                          - TCP
                          - UDP
                          type: string
                      required:
                      - address
                      - port
                      type: object
                    type:
                      description: 'Type is the the type name of the backend address:
                        FQDN, UDS, IPv4'
                      enum:
                      - FQDN
                      - UDS
                      - IPv4
                      type: string
                    unixDomainSocketAddress:
                      description: UnixDomainSocketAddress defines the unix domain
                        socket path
                      properties:
                        path:
                          type: string
                      required:
                      - path
                      type: object
                  required:
                  - type
                  type: object
                  x-kubernetes-validations:
                  - message: one of socketAddress or unixDomainSocketAddress must
                      be specified
                    rule: (has(self.socketAddress) || has(self.unixDomainSocketAddress))
                  - message: only one of socketAddress or unixDomainSocketAddress
                      can be specified
                    rule: (has(self.socketAddress) && !has(self.unixDomainSocketAddress))
                      || (!has(self.socketAddress) && has(self.unixDomainSocketAddress))
                  - message: if type is FQDN or IPv4, socketAddress must be set; if
                      type is UDS, unixDomainSocketAddress must be set
                    rule: ((has(self.socketAddress) && (self.type == 'FQDN' || self.type
                      == 'IPv4')) || has(self.unixDomainSocketAddress) && self.type
                      == 'UDS')
                maxItems: 4
                minItems: 1
                type: array
                x-kubernetes-validations:
                - message: FQDN addresses cannot be mixed with other address types
                  rule: self.all(f, f.type == 'FQDN') || !self.exists(f, f.type ==
                    'FQDN')
              applicationProtocol:
                description: ApplicationProtocol defines the application protocol
                  to be used, e.g. HTTP2.
                enum:
                - HTTP2
                - WS
                type: string
            type: object
          status:
            description: status defines the current status of Backend.
            properties:
              conditions:
                description: Conditions describe the current conditions of the Backend.
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource.\n---\nThis struct is intended for
                    direct use as an array at the field path .status.conditions.  For
                    example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the
                    observations of a foo's current state.\n\t    // Known .status.conditions.type
                    are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    //
                    +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t
                    \   // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                    patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t
                    \   // other fields\n\t}"
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: |-
                        type of condition in CamelCase or in foo.example.com/CamelCase.
                        ---
                        Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
                        useful (see .node.status.conditions), the ability to deconflict is important.
                        The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                maxItems: 8
                type: array
                x-kubernetes-list-map-keys:
                - type
                x-kubernetes-list-type: map
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
