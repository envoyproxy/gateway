// Copyright Envoy Gateway Authors
// SPDX-License-Identifier: Apache-2.0
// The full text of the Apache license is available in the LICENSE file at
// the root of the repo.

// Code generated by informer-gen. DO NOT EDIT.

package v1alpha1

import (
	internalinterfaces "github.com/envoyproxy/gateway/pkg/client/informers/externalversions/internalinterfaces"
)

// Interface provides access to all the informers in this group version.
type Interface interface {
	// Backends returns a BackendInformer.
	Backends() BackendInformer
	// BackendTrafficPolicies returns a BackendTrafficPolicyInformer.
	BackendTrafficPolicies() BackendTrafficPolicyInformer
	// ClientTrafficPolicies returns a ClientTrafficPolicyInformer.
	ClientTrafficPolicies() ClientTrafficPolicyInformer
	// EnvoyExtensionPolicies returns a EnvoyExtensionPolicyInformer.
	EnvoyExtensionPolicies() EnvoyExtensionPolicyInformer
	// EnvoyPatchPolicies returns a EnvoyPatchPolicyInformer.
	EnvoyPatchPolicies() EnvoyPatchPolicyInformer
	// EnvoyProxies returns a EnvoyProxyInformer.
	EnvoyProxies() EnvoyProxyInformer
	// HTTPRouteFilters returns a HTTPRouteFilterInformer.
	HTTPRouteFilters() HTTPRouteFilterInformer
	// SecurityPolicies returns a SecurityPolicyInformer.
	SecurityPolicies() SecurityPolicyInformer
}

type version struct {
	factory          internalinterfaces.SharedInformerFactory
	namespace        string
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// New returns a new Interface.
func New(f internalinterfaces.SharedInformerFactory, namespace string, tweakListOptions internalinterfaces.TweakListOptionsFunc) Interface {
	return &version{factory: f, namespace: namespace, tweakListOptions: tweakListOptions}
}

// Backends returns a BackendInformer.
func (v *version) Backends() BackendInformer {
	return &backendInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}

// BackendTrafficPolicies returns a BackendTrafficPolicyInformer.
func (v *version) BackendTrafficPolicies() BackendTrafficPolicyInformer {
	return &backendTrafficPolicyInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}

// ClientTrafficPolicies returns a ClientTrafficPolicyInformer.
func (v *version) ClientTrafficPolicies() ClientTrafficPolicyInformer {
	return &clientTrafficPolicyInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}

// EnvoyExtensionPolicies returns a EnvoyExtensionPolicyInformer.
func (v *version) EnvoyExtensionPolicies() EnvoyExtensionPolicyInformer {
	return &envoyExtensionPolicyInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}

// EnvoyPatchPolicies returns a EnvoyPatchPolicyInformer.
func (v *version) EnvoyPatchPolicies() EnvoyPatchPolicyInformer {
	return &envoyPatchPolicyInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}

// EnvoyProxies returns a EnvoyProxyInformer.
func (v *version) EnvoyProxies() EnvoyProxyInformer {
	return &envoyProxyInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}

// HTTPRouteFilters returns a HTTPRouteFilterInformer.
func (v *version) HTTPRouteFilters() HTTPRouteFilterInformer {
	return &hTTPRouteFilterInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}

// SecurityPolicies returns a SecurityPolicyInformer.
func (v *version) SecurityPolicies() SecurityPolicyInformer {
	return &securityPolicyInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}
