envoyExtensionPolicies:
- apiVersion: gateway.envoyproxy.io/v1alpha1
  kind: EnvoyExtensionPolicy
  metadata:
    creationTimestamp: null
    name: policy-for-gateway
    namespace: envoy-gateway
  spec:
    targetRef:
      group: gateway.networking.k8s.io
      kind: Gateway
      name: gateway-1
    wasm:
    - code:
        http:
          url: https://www.example.com/wasm-filter-1.wasm
        sha256: 746df05c8f3a0b07a46c0967cfbc5cbe5b9d48d0f79b6177eeedf8be6c8b34b5
        type: HTTP
      config:
        parameter1:
          key1: value1
          key2: value2
        parameter2: value3
      name: wasm-filter-1
    - code:
        http:
          url: https://www.example.com/wasm-filter-2.wasm
        sha256: a1efca12ea51069abb123bf9c77889fcc2a31cc5483fc14d115e44fdf07c7980
        type: HTTP
      config:
        parameter1: value1
        parameter2: value2
      name: wasm-filter-2
  status:
    ancestors:
    - ancestorRef:
        group: gateway.networking.k8s.io
        kind: Gateway
        name: gateway-1
        namespace: envoy-gateway
      conditions:
      - lastTransitionTime: null
        message: Policy has been accepted.
        reason: Accepted
        status: "True"
        type: Accepted
      controllerName: gateway.envoyproxy.io/gatewayclass-controller
gateways:
- apiVersion: gateway.networking.k8s.io/v1
  kind: Gateway
  metadata:
    creationTimestamp: null
    name: gateway-1
    namespace: envoy-gateway
  spec:
    gatewayClassName: envoy-gateway-class
    listeners:
    - allowedRoutes:
        namespaces:
          from: All
      name: http
      port: 80
      protocol: HTTP
  status:
    listeners:
    - attachedRoutes: 1
      conditions:
      - lastTransitionTime: null
        message: Sending translated listener configuration to the data plane
        reason: Programmed
        status: "True"
        type: Programmed
      - lastTransitionTime: null
        message: Listener has been successfully translated
        reason: Accepted
        status: "True"
        type: Accepted
      - lastTransitionTime: null
        message: Listener references have been resolved
        reason: ResolvedRefs
        status: "True"
        type: ResolvedRefs
      name: http
      supportedKinds:
      - group: gateway.networking.k8s.io
        kind: HTTPRoute
      - group: gateway.networking.k8s.io
        kind: GRPCRoute
httpRoutes:
- apiVersion: gateway.networking.k8s.io/v1
  kind: HTTPRoute
  metadata:
    creationTimestamp: null
    name: httproute-1
    namespace: envoy-gateway
  spec:
    hostnames:
    - www.example.com
    parentRefs:
    - name: gateway-1
      namespace: envoy-gateway
      sectionName: http
    rules:
    - backendRefs:
      - name: service-1
        port: 8080
      matches:
      - path:
          value: /foo
  status:
    parents:
    - conditions:
      - lastTransitionTime: null
        message: Route is accepted
        reason: Accepted
        status: "True"
        type: Accepted
      - lastTransitionTime: null
        message: Service envoy-gateway/service-1 not found
        reason: BackendNotFound
        status: "False"
        type: ResolvedRefs
      controllerName: gateway.envoyproxy.io/gatewayclass-controller
      parentRef:
        name: gateway-1
        namespace: envoy-gateway
        sectionName: http
infraIR:
  envoy-gateway/gateway-1:
    proxy:
      config:
        apiVersion: gateway.envoyproxy.io/v1alpha1
        kind: EnvoyProxy
        metadata:
          creationTimestamp: null
          name: custom-proxy-config
          namespace: envoy-gateway-system
        spec:
          filterOrder:
          - before: envoy.filters.http.jwt_authn
            name: envoy.filters.http.wasm
          - after: envoy.filters.http.basic_authn
            name: envoy.filters.http.cors
          logging: {}
        status: {}
      listeners:
      - address: null
        name: envoy-gateway/gateway-1/http
        ports:
        - containerPort: 10080
          name: http-80
          protocol: HTTP
          servicePort: 80
      metadata:
        labels:
          gateway.envoyproxy.io/owning-gateway-name: gateway-1
          gateway.envoyproxy.io/owning-gateway-namespace: envoy-gateway
      name: envoy-gateway/gateway-1
securityPolicies:
- apiVersion: gateway.envoyproxy.io/v1alpha1
  kind: SecurityPolicy
  metadata:
    creationTimestamp: null
    name: policy-for-gateway
    namespace: envoy-gateway
  spec:
    basicAuth:
      users:
        group: null
        kind: null
        name: users-secret1
    cors:
      allowMethods:
      - GET
      - POST
      allowOrigins:
      - https://*.test.com:8080
      - https://www.test.org:8080
    jwt:
      providers:
      - audiences:
        - one.foo.com
        claimToHeaders:
        - claim: claim1
          header: one-route-example-key
        issuer: https://one.example.com
        name: example1
        remoteJWKS:
          uri: https://one.example.com/jwt/public-key/jwks.json
      - audiences:
        - two.foo.com
        claimToHeaders:
        - claim: claim2
          header: two-route-example-key
        issuer: http://two.example.com
        name: example2
        remoteJWKS:
          uri: http://two.example.com/jwt/public-key/jwks.json
    targetRef:
      group: gateway.networking.k8s.io
      kind: Gateway
      name: gateway-1
  status:
    ancestors:
    - ancestorRef:
        group: gateway.networking.k8s.io
        kind: Gateway
        name: gateway-1
        namespace: envoy-gateway
      conditions:
      - lastTransitionTime: null
        message: Policy has been accepted.
        reason: Accepted
        status: "True"
        type: Accepted
      controllerName: gateway.envoyproxy.io/gatewayclass-controller
xdsIR:
  envoy-gateway/gateway-1:
    accessLog:
      text:
      - path: /dev/stdout
    filterOrder:
    - before: envoy.filters.http.jwt_authn
      name: envoy.filters.http.wasm
    - after: envoy.filters.http.basic_authn
      name: envoy.filters.http.cors
    http:
    - address: 0.0.0.0
      hostnames:
      - '*'
      isHTTP2: false
      name: envoy-gateway/gateway-1/http
      path:
        escapedSlashesAction: UnescapeAndRedirect
        mergeSlashes: true
      port: 10080
      routes:
      - destination:
          name: httproute/envoy-gateway/httproute-1/rule/0
          settings:
          - weight: 1
        directResponse:
          statusCode: 500
        hostname: www.example.com
        isHTTP2: false
        name: httproute/envoy-gateway/httproute-1/rule/0/match/0/www_example_com
        pathMatch:
          distinct: false
          name: ""
          prefix: /foo
        security:
          basicAuth:
            name: securitypolicy/envoy-gateway/policy-for-gateway
            users: dXNlcjE6e1NIQX10RVNzQm1FL3lOWTNsYjZhMEw2dlZRRVpOcXc9CnVzZXIyOntTSEF9RUo5TFBGRFhzTjl5blNtYnh2anA3NUJtbHg4PQo=
          cors:
            allowMethods:
            - GET
            - POST
            allowOrigins:
            - distinct: false
              name: ""
              safeRegex: https://.*\.test\.com:8080
            - distinct: false
              exact: https://www.test.org:8080
              name: ""
          jwt:
            providers:
            - audiences:
              - one.foo.com
              claimToHeaders:
              - claim: claim1
                header: one-route-example-key
              issuer: https://one.example.com
              name: example1
              remoteJWKS:
                uri: https://one.example.com/jwt/public-key/jwks.json
            - audiences:
              - two.foo.com
              claimToHeaders:
              - claim: claim2
                header: two-route-example-key
              issuer: http://two.example.com
              name: example2
              remoteJWKS:
                uri: http://two.example.com/jwt/public-key/jwks.json
        wasm:
        - config:
            parameter1:
              key1: value1
              key2: value2
            parameter2: value3
          failOpen: false
          httpWasmCode:
            sha256: 746df05c8f3a0b07a46c0967cfbc5cbe5b9d48d0f79b6177eeedf8be6c8b34b5
            url: https://www.example.com/wasm-filter-1.wasm
          name: envoyextensionpolicy/envoy-gateway/policy-for-gateway/0
          wasmName: wasm-filter-1
        - config:
            parameter1: value1
            parameter2: value2
          failOpen: false
          httpWasmCode:
            sha256: a1efca12ea51069abb123bf9c77889fcc2a31cc5483fc14d115e44fdf07c7980
            url: https://www.example.com/wasm-filter-2.wasm
          name: envoyextensionpolicy/envoy-gateway/policy-for-gateway/1
          wasmName: wasm-filter-2
