// Copyright Envoy Gateway Authors
// SPDX-License-Identifier: Apache-2.0
// The full text of the Apache license is available in the LICENSE file at
// the root of the repo.

//go:build e2e
// +build e2e

package tests

import (
	"testing"

	"k8s.io/apimachinery/pkg/types"
	"sigs.k8s.io/gateway-api/conformance/utils/http"
	"sigs.k8s.io/gateway-api/conformance/utils/kubernetes"
	"sigs.k8s.io/gateway-api/conformance/utils/suite"
)

func init() {
	ConformanceTests = append(ConformanceTests, ClientTimeoutTest)
}

var largeHeader = "apiVersion: v1kind: Namespace metadata:  name: gateway-conformance-infra  labels:    gateway-conformance: infra---apiVersion: gateway.networking.k8s.io/v1kind: Gatewaymetadata:  name: same-namespace  namespace: gateway-conformance-infraspec:  gatewayClassName:   listeners:  - name: http    port: 80    protocol: HTTP    allowedRoutes:      namespaces:        from: Same---apiVersion: gateway.networking.k8s.io/v1kind: Gatewaymetadata:  name: all-namespaces  namespace: gateway-conformance-infraspec:  gatewayClassName:   listeners:  - name: http    port: 80    protocol: HTTP    allowedRoutes:      namespaces:        from: All---apiVersion: gateway.networking.k8s.io/v1kind: Gatewaymetadata:  name: backend-namespaces  namespace: gateway-conformance-infraspec:  gatewayClassName:   listeners:  - name: http    port: 80    protocol: HTTP    allowedRoutes:      namespaces:        from: Selector        selector:          matchLabels:            gateway-conformance: backend---apiVersion: gateway.networking.k8s.io/v1beta1kind: Gatewaymetadata:  name: my-tcp-gateway  namespace: gateway-conformance-infraspec:  gatewayClassName:   listeners:  - name: foo    protocol: TCP    port: 8080    allowedRoutes:      kinds:      - kind: TCPRoute  - name: bar    protocol: TCP    port: 8090    allowedRoutes:      kinds:      - kind: TCPRoute---apiVersion: v1kind: Servicemetadata:  name: infra-backend-v1  namespace: gateway-conformance-infraspec:  selector:    app: infra-backend-v1  ports:  - protocol: TCP    port: 8080    targetPort: 3000---apiVersion: apps/v1kind: Deploymentmetadata:  name: infra-backend-v1  namespace: gateway-conformance-infra  labels:    app: infra-backend-v1spec:  replicas: 2  selector:    matchLabels:      app: infra-backend-v1  template:    metadata:      labels:        app: infra-backend-v1    spec:      containers:      - name: infra-backend-v1        # From https://github.com/kubernetes-sigs/ingress-controller-conformance/tree/master/images/echoserver        image: gcr.io/k8s-staging-ingressconformance/echoserver:v20221109-7ee2f3e        env:        - name: POD_NAME          valueFrom:            fieldRef:              fieldPath: metadata.name        - name: NAMESPACE          valueFrom:            fieldRef:              fieldPath: metadata.namespace        resources:          requests:            cpu: 10m---apiVersion: v1kind: Servicemetadata:  name: infra-backend-v2  namespace: gateway-conformance-infraspec:  selector:    app: infra-backend-v2  ports:  - protocol: TCP    port: 8080    targetPort: 3000---apiVersion: apps/v1kind: Deploymentmetadata:  name: infra-backend-v2  namespace: gateway-conformance-infra  labels:    app: infra-backend-v2spec:  replicas: 2  selector:    matchLabels:      app: infra-backend-v2  template:    metadata:      labels:        app: infra-backend-v2    spec:      containers:      - name: infra-backend-v2        image: gcr.io/k8s-staging-ingressconformance/echoserver:v20221109-7ee2f3e        env:        - name: POD_NAME          valueFrom:            fieldRef:              fieldPath: metadata.name        - name: NAMESPACE          valueFrom:            fieldRef:              fieldPath: metadata.namespace        resources:          requests:            cpu: 10m---apiVersion: v1kind: Servicemetadata:  name: infra-backend-v3  namespace: gateway-conformance-infraspec:  selector:    app: infra-backend-v3  ports:  - protocol: TCP    port: 8080    targetPort: 3000---apiVersion: apps/v1kind: Deploymentmetadata:  name: infra-backend-v3  namespace: gateway-conformance-infra  labels:    app: infra-backend-v3spec:  replicas: 2  selector:    matchLabels:      app: infra-backend-v3  template:    metadata:      labels:        app: infra-backend-v3    spec:      containers:      - name: infra-backend-v3        image: gcr.io/k8s-staging-ingressconformance/echoserver:v20221109-7ee2f3e        env:        - name: POD_NAME          valueFrom:            fieldRef:              fieldPath: metadata.name        - name: NAMESPACE          valueFrom:            fieldRef:              fieldPath: metadata.namespace        resources:          requests:            cpu: 10m---apiVersion: v1kind: Servicemetadata:  name: tls-backend  namespace: gateway-conformance-infraspec:  selector:    app: tls-backend  ports:  - protocol: TCP    port: 443    targetPort: 8443---apiVersion: apps/v1kind: Deploymentmetadata:  name: tls-backend  namespace: gateway-conformance-infra  labels:    app: tls-backendspec:  replicas: 1  selector:    matchLabels:      app: tls-backend  template:    metadata:      labels:        app: tls-backend    spec:      containers:      - name: tls-backend        image: gcr.io/k8s-staging-ingressconformance/echoserver:v20221109-7ee2f3e        volumeMounts:        - name: secret-volume          mountPath: /etc/secret-volume        env:        - name: POD_NAME          valueFrom:            fieldRef:              fieldPath: metadata.name        - name: NAMESPACE          valueFrom:            fieldRef:              fieldPath: metadata.namespace        - name: TLS_SERVER_CERT          value: /etc/secret-volume/crt        - name: TLS_SERVER_PRIVKEY          value: /etc/secret-volume/key        resources:          requests:            cpu: 10m      volumes:      - name: secret-volume        secret:          secretName: tls-passthrough-checks-certificate          items:          - key: tls.crt            path: crt          - key: tls.key            path: key---apiVersion: v1kind: Namespacemetadata:  name: gateway-conformance-app-backend  labels:    gateway-conformance: backend---apiVersion: v1kind: Servicemetadata:  name: app-backend-v1  namespace: gateway-conformance-app-backendspec:  selector:    app: app-backend-v1  ports:  - protocol: TCP    port: 8080    targetPort: 3000---apiVersion: apps/v1kind: Deploymentmetadata:  name: app-backend-v1  namespace: gateway-conformance-app-backend  labels:    app: app-backend-v1spec:  replicas: 2  selector:    matchLabels:      app: app-backend-v1  template:    metadata:      labels:        app: app-backend-v1    spec:      containers:      - name: app-backend-v1        image: gcr.io/k8s-staging-ingressconformance/echoserver:v20221109-7ee2f3e        env:        - name: POD_NAME          valueFrom:            fieldRef:              fieldPath: metadata.name        - name: NAMESPACE          valueFrom:            fieldRef:              fieldPath: metadata.namespace        resources:          requests:            cpu: 10m---apiVersion: v1kind: Servicemetadata:  name: app-backend-v2  namespace: gateway-conformance-app-backendspec:  selector:    app: app-backend-v2  ports:  - protocol: TCP    port: 8080    targetPort: 3000---apiVersion: apps/v1kind: Deploymentmetadata:  name: app-backend-v2  namespace: gateway-conformance-app-backend  labels:    app: app-backend-v2spec:  replicas: 2  selector:    matchLabels:      app: app-backend-v2  template:    metadata:      labels:        app: app-backend-v2    spec:      containers:      - name: app-backend-v2        image: gcr.io/k8s-staging-ingressconformance/echoserver:v20221109-7ee2f3e        env:        - name: POD_NAME          valueFrom:            fieldRef:              fieldPath: metadata.name        - name: NAMESPACE          valueFrom:            fieldRef:              fieldPath: metadata.namespace        resources:          requests:            cpu: 10m---apiVersion: v1kind: Namespacemetadata:  name: gateway-conformance-web-backend  labels:    gateway-conformance: backend---apiVersion: v1kind: Servicemetadata:  name: web-backend  namespace: gateway-conformance-web-backendspec:  selector:    app: web-backend  ports:  - protocol: TCP    port: 8080    targetPort: 3000---apiVersion: apps/v1kind: Deploymentmetadata:  name: web-backend  namespace: gateway-conformance-web-backend  labels:    app: web-backendspec:  replicas: 2  selector:    matchLabels:      app: web-backend  template:    metadata:      labels:        app: web-backend    spec:      containers:      - name: web-backend        image: gcr.io/k8s-staging-ingressconformance/echoserver:v20221109-7ee2f3e        env:        - name: POD_NAME          valueFrom:            fieldRef:              fieldPath: metadata.name        - name: NAMESPACE          valueFrom:            fieldRef:              fieldPath: metadata.namespace        resources:          requests:            cpu: 10m---apiVersion: v1kind: Namespacemetadata:  name: gateway-conformance-udp  labels:    gateway-conformance: udp---apiVersion: v1kind: Servicemetadata:  name: coredns  namespace: gateway-conformance-udp  labels:    app: udpspec:  ports:  - name: udp-dns    port: 53    protocol: UDP    targetPort: 53  selector:    app: udp---apiVersion: apps/v1kind: Deploymentmetadata:  name: coredns  namespace: gateway-conformance-udp  labels:    app: udpspec:  selector:    matchLabels:      app: udp  template:    metadata:      labels:        app: udp    spec:      containers:      - args:        - -conf        - /root/Corefile        image: coredns/coredns        name: coredns        volumeMounts:        - mountPath: /root          name: conf      volumes:      - configMap:          defaultMode: 420          name: coredns        name: conf---apiVersion: v1kind: ConfigMapmetadata:  name: coredns  namespace: gateway-conformance-udpdata:  Corefile: |    .:53 {        forward . 8.8.8.8 9.9.9.9        log        errors    }    foo.bar.com:53 {      whoami    }---apiVersion: gateway.networking.k8s.io/v1beta1kind: Gatewaymetadata:  name: udp-gateway  namespace: gateway-conformance-udpspec:  gatewayClassName:   listeners:  - name: coredns    protocol: UDP    port: 5300    allowedRoutes:      kinds:      - kind: UDPRoute---apiVersion: v1kind: Namespacemetadata:  name: gateway-preserve-case-backend\n>\n< HTTP/1.1 400 Bad Request\n< content-type: text/html\n< content-length: 189\n< date: Tue, 27 Feb 2024 03:01:00 GMT\n<\n<html>\n  <head>\n    <title>Bad Request</title>\n  </head>\n  <body>\n    <h1><p>Bad Request</p></h1>\n    Error parsing headers: &#x27;limit request headers fields size&#x27;\n  </body>\n</html>\n* Connection #0 to host 172.18.255.200 left intact\ncurl -v -H  http://172.18.255.200/get  0.00s user 0.00s system 23% cpu 0.026 total\n ~/Codes ------------------------------------------------------------------------------------- 9.2.6.0 rb  at 11:01:00\n> >....\n  app: tls-backend    spec:      containers:      - name: tls-backend        image: gcr.io/k8s-staging-ingressconformance/echoserver:v20221109-7ee2f3e        volumeMounts:        - name: secret-volume          mountPath: /etc/secret-volume        env:        - name: POD_NAME          valueFrom:            fieldRef:              fieldPath: metadata.name        - name: NAMESPACE          valueFrom:            fieldRef:              fieldPath: metadata.namespace        - name: TLS_SERVER_CERT          value: /etc/secret-volume/crt        - name: TLS_SERVER_PRIVKEY          value: /etc/secret-volume/key        resources:          requests:            cpu: 10m      volumes:      - name: secret-volume        secret:          secretName: tls-passthrough-checks-certificate          items:          - key: tls.crt            path: crt          - key: tls.key            path: key---apiVersion: v1kind: Namespacemetadata:  name: gateway-conformance-app-backend  labels:    gateway-conformance: backend---apiVersion: v1kind: Servicemetadata:  name: app-backend-v1  namespace: gateway-conformance-app-backendspec:  selector:    app: app-backend-v1  ports:  - protocol: TCP    port: 8080    targetPort: 3000---apiVersion: apps/v1kind: Deploymentmetadata:  name: app-backend-v1  namespace: gateway-conformance-app-backend  labels:    app: app-backend-v1spec:  replicas: 2  selector:    matchLabels:      app: app-backend-v1  template:    metadata:      labels:        app: app-backend-v1    spec:      containers:      - name: app-backend-v1        image: gcr.io/k8s-staging-ingressconformance/echoserver:v20221109-7ee2f3e        env:        - name: POD_NAME          valueFrom:            fieldRef:              fieldPath: metadata.name        - name: NAMESPACE          valueFrom:            fieldRef:              fieldPath: metadata.namespace        resources:          requests:            cpu: 10m---apiVersion: v1kind: Servicemetadata:  name: app-backend-v2  namespace: gateway-conformance-app-backendspec:  selector:    app: app-backend-v2  ports:  - protocol: TCP    port: 8080    targetPort: 3000---apiVersion: apps/v1kind: Deploymentmetadata:  name: app-backend-v2  namespace: gateway-conformance-app-backend  labels:    app: app-backend-v2spec:  replicas: 2  selector:    matchLabels:      app: app-backend-v2  template:    metadata:      labels:        app: app-backend-v2    spec:      containers:      - name: app-backend-v2        image: gcr.io/k8s-staging-ingressconformance/echoserver:v20221109-7ee2f3e        env:        - name: POD_NAME          valueFrom:            fieldRef:              fieldPath: metadata.name        - name: NAMESPACE          valueFrom:            fieldRef:              fieldPath: metadata.namespace        resources:          requests:            cpu: 10m---apiVersion: v1kind: Namespacemetadata:  name: gateway-conformance-web-backend  labels:    gateway-conformance: backend---apiVersion: v1kind: Servicemetadata:  name: web-backend  namespace: gateway-conformance-web-backendspec:  selector:    app: web-backend  ports:  - protocol: TCP    port: 8080    targetPort: 3000---apiVersion: apps/v1kind: Deploymentmetadata:  name: web-backend  namespace: gateway-conformance-web-backend  labels:    app: web-backendspec:  replicas: 2  selector:    matchLabels:      app: web-backend  template:    metadata:      labels:        app: web-backend    spec:      containers:      - name: web-backend        image: gcr.io/k8s-staging-ingressconformance/echoserver:v20221109-7ee2f3e        env:        - name: POD_NAME          valueFrom:            fieldRef:              fieldPath: metadata.name        - name: NAMESPACE          valueFrom:            fieldRef:              fieldPath: metadata.namespace        resources:          requests:            cpu: 10m---apiVersion: v1kind: Namespacemetadata:  name: gateway-conformance-udp  labels:    gateway-conformance: udp---apiVersion: v1kind: Servicemetadata:  name: coredns  namespace: gateway-conformance-udp  labels:    app: udpspec:  ports:  - name: udp-dns    port: 53    protocol: UDP    targetPort: 53  selector:    app: udp---apiVersion: apps/v1kind: Deploymentmetadata:  name: coredns  namespace: gateway-conformance-udp  labels:    app: udpspec:  selector:    matchLabels:      app: udp  template:    metadata:      labels:        app: udp    spec:      containers:      - args:        - -conf        - /root/Corefile        image: coredns/coredns        name: coredns        volumeMounts:        - mountPath: /root          name: conf      volumes:      - configMap:          defaultMode: 420          name: coredns        name: conf---apiVersion: v1kind: ConfigMapmetadata:  name: coredns  namespace: gateway-conformance-udpdata:  Corefile: |    .:53 {        forward . 8.8.8.8 9.9.9.9        log        errors    }    foo.bar.com:53 {      whoami    }---apiVersion: gateway.networking.k8s.io/v1beta1kind: Gatewaymetadata:  name: udp-gateway  namespace: gateway-conformance-udpspec:  gatewayClassName:   listeners:  - name: coredns    protocol: UDP    port: 5300    allowedRoutes:      kinds:      - kind: UDPRoute---apiVersion: v1kind: Namespacemetadata:  name: gateway-preserve-case-backend"

var ClientTimeoutTest = suite.ConformanceTest{
	ShortName:   "ClientTimeout",
	Description: "Test that the ClientTrafficPolicy API implementation supports client timeout",
	Manifests:   []string{"testdata/client-timeout.yaml"},
	Test: func(t *testing.T, suite *suite.ConformanceTestSuite) {
		t.Run("http client timeout", func(t *testing.T) {
			ns := "gateway-conformance-infra"
			routeNN := types.NamespacedName{Name: "http-client-timeout", Namespace: ns}
			gwNN := types.NamespacedName{Name: "same-namespace", Namespace: ns}
			gwAddr := kubernetes.GatewayAndHTTPRoutesMustBeAccepted(t, suite.Client, suite.TimeoutConfig, suite.ControllerName, kubernetes.NewGatewayRef(gwNN), routeNN)

			expectedResponse := http.ExpectedResponse{
				Request: http.Request{
					Path: "/request-timeout",
					Headers: map[string]string{
						"x-large-header": largeHeader,
					},
				},
				Response: http.Response{
					StatusCode: 408, // return 408 instead of 400 when request timeout.
				},
				Namespace: ns,
			}

			req := http.MakeRequest(t, &expectedResponse, gwAddr, "HTTP", "http")
			cReq, cResp, err := suite.RoundTripper.CaptureRoundTrip(req)
			if err != nil {
				t.Errorf("failed to get expected response: %v", err)
			}

			if err := http.CompareRequest(t, &req, cReq, cResp, expectedResponse); err != nil {
				t.Errorf("failed to compare request and response: %v", err)
			}
		})
	},
}
