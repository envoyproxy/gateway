backendTLSPolicies:
- apiVersion: gateway.networking.k8s.io/v1alpha3
  kind: BackendTLSPolicy
  metadata:
    creationTimestamp: null
    name: example-tls-policy
    namespace: envoy-gateway-system
  spec:
    targetRefs:
    - group: gateway.envoyproxy.io
      kind: Backend
      name: backend
    validation:
      hostname: www.example.com
      wellKnownCACertificates: System
  status:
    ancestors: null
backendTrafficPolicies:
- apiVersion: gateway.envoyproxy.io/v1alpha1
  kind: BackendTrafficPolicy
  metadata:
    creationTimestamp: null
    name: cookie-lb-policy
    namespace: gateway-conformance-infra
  spec:
    circuitBreaker:
      maxConnections: 1024
      maxParallelRequests: 1024
      maxParallelRetries: 1024
      maxPendingRequests: 1024
      maxRequestsPerConnection: 123
    healthCheck:
      active:
        healthyThreshold: 1
        http:
          method: GET
          path: /
        interval: 3s
        timeout: 1s
        type: HTTP
        unhealthyThreshold: 3
    loadBalancer:
      consistentHash:
        cookie:
          attributes:
            SameSite: Strict
          name: Lb-Test-Cookie
          ttl: 1m0s
        tableSize: 65537
        type: Cookie
      type: ConsistentHash
    retry:
      numRetries: 2
      retryOn:
        httpStatusCodes:
        - 200
        - 404
    targetRefs:
    - group: gateway.networking.k8s.io
      kind: HTTPRoute
      name: cookie-lb-route
  status:
    ancestors: null
backends:
- apiVersion: gateway.envoyproxy.io/v1alpha1
  kind: Backend
  metadata:
    creationTimestamp: null
    name: backend
    namespace: envoy-gateway-system
  spec:
    endpoints:
    - ip:
        address: 0.0.0.0
        port: 4321
    type: Endpoints
  status: {}
clientTrafficPolicies:
- apiVersion: gateway.envoyproxy.io/v1alpha1
  kind: ClientTrafficPolicy
  metadata:
    creationTimestamp: null
    name: client-timeout
    namespace: gateway-conformance-infra
  spec:
    targetRefs:
    - group: gateway.networking.k8s.io
      kind: Gateway
      name: same-namespace
    timeout:
      http:
        requestReceivedTimeout: 50ms
  status:
    ancestors: null
configMaps:
- apiVersion: v1
  data:
    game.properties: |
      enemy.types=aliens,monsters
      player.maximum-lives=5
    player_initial_lives: "3"
  kind: ConfigMap
  metadata:
    creationTimestamp: null
    name: configmap
    namespace: default
envoyExtensionPolicies:
- apiVersion: gateway.envoyproxy.io/v1alpha1
  kind: EnvoyExtensionPolicy
  metadata:
    creationTimestamp: null
    name: ext-proc-example
    namespace: envoy-gateway-system
  spec:
    extProc:
    - backendRefs:
      - group: ""
        kind: Service
        name: grpc-ext-proc
        port: 9002
      failOpen: false
      processingMode:
        request: {}
        response:
          body: Streamed
    targetRefs:
    - group: gateway.networking.k8s.io
      kind: HTTPRoute
      name: backend
  status:
    ancestors: null
envoyPatchPolicies:
- apiVersion: gateway.envoyproxy.io/v1alpha1
  kind: EnvoyPatchPolicy
  metadata:
    creationTimestamp: null
    name: ratelimit-patch-policy
    namespace: default
  spec:
    jsonPatches:
    - name: default/eg/http
      operation:
        op: add
        path: /default_filter_chain/filters/0/typed_config/http_filters/0
        value:
          name: envoy.filters.http.ratelimit
          typed_config:
            '@type': type.googleapis.com/envoy.extensions.filters.http.ratelimit.v3.RateLimit
            domain: eag-ratelimit
            failure_mode_deny: true
            rate_limit_service:
              grpc_service:
                envoy_grpc:
                  cluster_name: rate-limit-cluster
              transport_api_version: V3
            timeout: 1s
      type: type.googleapis.com/envoy.config.listener.v3.Listener
    targetRef:
      group: gateway.networking.k8s.io
      kind: Gateway
      name: eg
    type: JSONPatch
  status:
    ancestors: null
envoyProxies:
- apiVersion: gateway.envoyproxy.io/v1alpha1
  kind: EnvoyProxy
  metadata:
    creationTimestamp: null
    name: example
    namespace: default
  spec:
    logging:
      level:
        default: warn
    provider:
      kubernetes:
        envoyService:
          annotations:
            custom1: svc-annotation1
          externalTrafficPolicy: Local
          type: LoadBalancer
      type: Kubernetes
  status: {}
- apiVersion: gateway.envoyproxy.io/v1alpha1
  kind: EnvoyProxy
  metadata:
    creationTimestamp: null
    name: default-envoy-proxy
    namespace: envoy-gateway-system
  spec:
    bootstrap:
      type: null
      value: |
        admin:
          access_log:
          - name: envoy.access_loggers.file
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
              path: /dev/null
          address:
            socket_address:
              address: 127.0.0.1
              port_value: 19000
        cluster_manager:
          local_cluster_name: local_cluster
        node:
          locality:
            zone: $(ENVOY_SERVICE_ZONE)
        layered_runtime:
          layers:
          - name: global_config
            static_layer:
              envoy.restart_features.use_eds_cache_for_ads: true
              re2.max_program_size.error_level: 4294967295
              re2.max_program_size.warn_level: 1000
        dynamic_resources:
          ads_config:
            api_type: DELTA_GRPC
            transport_api_version: V3
            grpc_services:
            - envoy_grpc:
                cluster_name: xds_cluster
            set_node_on_first_message_only: true
          lds_config:
            ads: {}
            resource_api_version: V3
          cds_config:
            ads: {}
            resource_api_version: V3
        static_resources:
          listeners:
          - name: envoy-gateway-proxy-stats-0.0.0.0-19001
            address:
              socket_address:
                address: '0.0.0.0'
                port_value: 19001
                protocol: TCP
            bypass_overload_manager: true
            filter_chains:
            - filters:
              - name: envoy.filters.network.http_connection_manager
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                  stat_prefix: eg-stats-http
                  normalize_path: true
                  route_config:
                    name: local_route
                    virtual_hosts:
                    - name: prometheus_stats
                      domains:
                      - "*"
                      routes:
                      - match:
                          path: /stats/prometheus
                          headers:
                          - name: ":method"
                            string_match:
                              exact: GET
                        route:
                          cluster: prometheus_stats
                  http_filters:
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
          clusters:
          - name: prometheus_stats
            connect_timeout: 0.250s
            type: STATIC
            lb_policy: ROUND_ROBIN
            load_assignment:
              cluster_name: prometheus_stats
              endpoints:
              - lb_endpoints:
                - endpoint:
                    address:
                      socket_address:
                        address: 127.0.0.1
                        port_value: 19000
          - connect_timeout: 10s
            lb_policy: ROUND_ROBIN
            load_assignment:
              cluster_name: local_cluster
              endpoints:
              - lb_endpoints:
                - endpoint:
                    address:
                      socket_address:
                        address: 127.0.0.1
                        port_value: 10080
                  load_balancing_weight: 1
                load_balancing_weight: 1
                locality:
                  zone: $(ENVOY_SERVICE_ZONE)
            name: local_cluster
            type: STATIC
          - connect_timeout: 10s
            load_assignment:
              cluster_name: xds_cluster
              endpoints:
              - load_balancing_weight: 1
                lb_endpoints:
                - load_balancing_weight: 1
                  endpoint:
                    address:
                      socket_address:
                        address: envoy-gateway
                        port_value: 18000
            typed_extension_protocol_options:
              envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
                "@type": "type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions"
                explicit_http_config:
                  http2_protocol_options:
                    connection_keepalive:
                      interval: 30s
                      timeout: 5s
            name: xds_cluster
            type: STRICT_DNS
            transport_socket:
              name: envoy.transport_sockets.tls
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
                common_tls_context:
                  tls_params:
                    tls_maximum_protocol_version: TLSv1_3
                  tls_certificate_sds_secret_configs:
                  - name: xds_certificate
                    sds_config:
                      path_config_source:
                        path: /sds/xds-certificate.json
                      resource_api_version: V3
                  validation_context_sds_secret_config:
                    name: xds_trusted_ca
                    sds_config:
                      path_config_source:
                        path: /sds/xds-trusted-ca.json
                      resource_api_version: V3
        overload_manager:
          refresh_interval: 0.25s
          resource_monitors:
          - name: "envoy.resource_monitors.global_downstream_max_connections"
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.resource_monitors.downstream_connections.v3.DownstreamConnectionsConfig
              max_active_downstream_connections: 50000
    logging: {}
  status: {}
gatewayClasses:
- apiVersion: gateway.networking.k8s.io/v1
  kind: GatewayClass
  metadata:
    creationTimestamp: null
    name: eg-with-ep
  spec:
    controllerName: gateway.envoyproxy.io/gatewayclass-controller
    parametersRef:
      group: gateway.envoyproxy.io
      kind: EnvoyProxy
      name: example
      namespace: default
  status: {}
- apiVersion: gateway.networking.k8s.io/v1
  kind: GatewayClass
  metadata:
    creationTimestamp: null
    name: eg-without-ep-1
  spec:
    controllerName: gateway.envoyproxy.io/gatewayclass-controller
    parametersRef:
      group: gateway.envoyproxy.io
      kind: EnvoyProxy
      name: default-envoy-proxy
      namespace: envoy-gateway-system
  status: {}
- apiVersion: gateway.networking.k8s.io/v1
  kind: GatewayClass
  metadata:
    creationTimestamp: null
    name: eg-without-ep-2
  spec:
    controllerName: gateway.envoyproxy.io/gatewayclass-controller
    parametersRef:
      group: gateway.envoyproxy.io
      kind: EnvoyProxy
      name: default-envoy-proxy
      namespace: envoy-gateway-system
  status: {}
gateways:
- apiVersion: gateway.networking.k8s.io/v1
  kind: Gateway
  metadata:
    creationTimestamp: null
    name: eg
    namespace: envoy-gateway-system
  spec:
    gatewayClassName: eg
    listeners:
    - allowedRoutes:
        namespaces:
          from: Same
      name: http
      port: 80
      protocol: HTTP
  status: {}
grpcRoutes:
- apiVersion: gateway.networking.k8s.io/v1
  kind: GRPCRoute
  metadata:
    creationTimestamp: null
    name: backend
    namespace: default
  spec:
    hostnames:
    - www.grpc-example.com
    parentRefs:
    - group: gateway.networking.k8s.io
      kind: Gateway
      name: eg
      sectionName: grpc
    rules:
    - backendRefs:
      - group: ""
        kind: Service
        name: providedBackend
        port: 9000
        weight: 1
      matches:
      - headers:
        - name: com.example.Header
          type: Exact
          value: foobar
        method:
          method: DoThing
          service: com.example.Things
          type: Exact
  status:
    parents: null
httpFilters:
- apiVersion: gateway.envoyproxy.io/v1alpha1
  kind: HTTPRouteFilter
  metadata:
    creationTimestamp: null
    name: direct-response-inline
    namespace: default
  spec:
    directResponse:
      body:
        inline: OK
        type: Inline
      contentType: text/plain
httpRoutes:
- apiVersion: gateway.networking.k8s.io/v1
  kind: HTTPRoute
  metadata:
    creationTimestamp: null
    name: backend
    namespace: default
  spec:
    hostnames:
    - www.example.com
    parentRefs:
    - group: gateway.networking.k8s.io
      kind: Gateway
      name: eg
    rules:
    - backendRefs:
      - group: ""
        kind: Service
        name: providedBackend
        port: 8000
        weight: 1
      matches:
      - path:
          type: PathPrefix
          value: /
  status:
    parents: null
namespaces:
- apiVersion: v1
  kind: Namespace
  metadata:
    creationTimestamp: null
    name: envoy-gateway-system
  spec: {}
  status: {}
- apiVersion: v1
  kind: Namespace
  metadata:
    creationTimestamp: null
    name: default
  spec: {}
  status: {}
- apiVersion: v1
  kind: Namespace
  metadata:
    creationTimestamp: null
    name: gateway-conformance-infra
  spec: {}
  status: {}
referenceGrants:
- apiVersion: gateway.networking.k8s.io/v1beta1
  kind: ReferenceGrant
  metadata:
    creationTimestamp: null
    name: refg-example
    namespace: default
  spec:
    from:
    - group: gateway.networking.k8s.io
      kind: HTTPRoute
      namespace: envoy-gateway
    - group: gateway.networking.k8s.io
      kind: TCPRoute
      namespace: envoy-gateway
    - group: gateway.networking.k8s.io
      kind: Gateway
      namespace: envoy-gateway
    - group: gateway.networking.k8s.io
      kind: BackendTLSPolicy
      namespace: default
    to:
    - group: ""
      kind: Service
secrets:
- apiVersion: v1
  data:
    .secret-file: dmFsdWUtMg0KDQo=
  kind: Secret
  metadata:
    creationTimestamp: null
    name: secret-with-data-and-string-data
    namespace: default
  stringData:
    secret: literal value
- apiVersion: v1
  data:
    .secret-file: dmFsdWUtMg0KDQo=
  kind: Secret
  metadata:
    creationTimestamp: null
    name: secret-with-data
    namespace: default
- apiVersion: v1
  kind: Secret
  metadata:
    creationTimestamp: null
    name: secret-with-string-data
    namespace: default
  stringData:
    secret: literal value
- apiVersion: v1
  data:
    .secret-file: dmFsdWUtMg0KDQo=
  kind: Secret
  metadata:
    creationTimestamp: null
    name: secret-with-type
    namespace: default
  type: type value
securityPolicies:
- apiVersion: gateway.envoyproxy.io/v1alpha1
  kind: SecurityPolicy
  metadata:
    creationTimestamp: null
    name: jwt-example
    namespace: envoy-gateway-system
  spec:
    apiKeyAuth:
      credentialRefs:
      - group: ""
        kind: Secret
        name: foobar
      extractFrom:
      - headers:
        - foobar
    jwt:
      providers:
      - name: example
        remoteJWKS:
          uri: https://raw.githubusercontent.com/envoyproxy/gateway/main/examples/kubernetes/jwt/jwks.json
    targetRef:
      group: gateway.networking.k8s.io
      kind: HTTPRoute
      name: backend
  status:
    ancestors: null
services:
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: backend
    namespace: default
  spec:
    clusterIP: 1.2.3.4
    ports:
    - name: TCP-3000
      port: 3000
      protocol: TCP
      targetPort: 0
    - name: UDP-3000
      port: 3000
      protocol: UDP
      targetPort: 0
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: providedBackend
    namespace: default
  spec:
    clusterIP: 1.2.3.4
    ports:
    - name: TCP-8000
      port: 8000
      protocol: TCP
      targetPort: 0
    - name: TCP-9000
      port: 9000
      protocol: TCP
      targetPort: 0
  status:
    loadBalancer: {}
tcpRoutes:
- apiVersion: gateway.networking.k8s.io/v1alpha2
  kind: TCPRoute
  metadata:
    creationTimestamp: null
    name: backend
    namespace: default
  spec:
    parentRefs:
    - group: gateway.networking.k8s.io
      kind: Gateway
      name: eg
      sectionName: tcp
    rules:
    - backendRefs:
      - group: ""
        kind: Service
        name: backend
        port: 3000
        weight: 1
  status:
    parents: null
tlsRoutes:
- apiVersion: gateway.networking.k8s.io/v1alpha2
  kind: TLSRoute
  metadata:
    creationTimestamp: null
    name: backend
    namespace: default
  spec:
    parentRefs:
    - group: gateway.networking.k8s.io
      kind: Gateway
      name: eg
      sectionName: tls-passthrough
    rules:
    - backendRefs:
      - group: ""
        kind: Service
        name: backend
        port: 3000
        weight: 1
  status:
    parents: null
udpRoutes:
- apiVersion: gateway.networking.k8s.io/v1alpha2
  kind: UDPRoute
  metadata:
    creationTimestamp: null
    name: backend
    namespace: default
  spec:
    parentRefs:
    - group: gateway.networking.k8s.io
      kind: Gateway
      name: eg
      sectionName: udp
    rules:
    - backendRefs:
      - group: ""
        kind: Service
        name: backend
        port: 3000
        weight: 1
  status:
    parents: null
