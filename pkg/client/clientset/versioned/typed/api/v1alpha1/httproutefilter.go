// Copyright Envoy Gateway Authors
// SPDX-License-Identifier: Apache-2.0
// The full text of the Apache license is available in the LICENSE file at
// the root of the repo.

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"

	apiv1alpha1 "github.com/envoyproxy/gateway/api/v1alpha1"
	scheme "github.com/envoyproxy/gateway/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// HTTPRouteFiltersGetter has a method to return a HTTPRouteFilterInterface.
// A group's client should implement this interface.
type HTTPRouteFiltersGetter interface {
	HTTPRouteFilters(namespace string) HTTPRouteFilterInterface
}

// HTTPRouteFilterInterface has methods to work with HTTPRouteFilter resources.
type HTTPRouteFilterInterface interface {
	Create(ctx context.Context, hTTPRouteFilter *apiv1alpha1.HTTPRouteFilter, opts v1.CreateOptions) (*apiv1alpha1.HTTPRouteFilter, error)
	Update(ctx context.Context, hTTPRouteFilter *apiv1alpha1.HTTPRouteFilter, opts v1.UpdateOptions) (*apiv1alpha1.HTTPRouteFilter, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*apiv1alpha1.HTTPRouteFilter, error)
	List(ctx context.Context, opts v1.ListOptions) (*apiv1alpha1.HTTPRouteFilterList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *apiv1alpha1.HTTPRouteFilter, err error)
	HTTPRouteFilterExpansion
}

// hTTPRouteFilters implements HTTPRouteFilterInterface
type hTTPRouteFilters struct {
	*gentype.ClientWithList[*apiv1alpha1.HTTPRouteFilter, *apiv1alpha1.HTTPRouteFilterList]
}

// newHTTPRouteFilters returns a HTTPRouteFilters
func newHTTPRouteFilters(c *GatewayV1alpha1Client, namespace string) *hTTPRouteFilters {
	return &hTTPRouteFilters{
		gentype.NewClientWithList[*apiv1alpha1.HTTPRouteFilter, *apiv1alpha1.HTTPRouteFilterList](
			"httproutefilters",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *apiv1alpha1.HTTPRouteFilter { return &apiv1alpha1.HTTPRouteFilter{} },
			func() *apiv1alpha1.HTTPRouteFilterList { return &apiv1alpha1.HTTPRouteFilterList{} },
		),
	}
}
