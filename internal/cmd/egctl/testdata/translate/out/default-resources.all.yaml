envoyProxy:
  metadata:
    creationTimestamp: null
    name: default-envoy-proxy
    namespace: envoy-gateway-system
  spec:
    bootstrap: |
      admin:
        access_log:
        - name: envoy.access_loggers.file
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
            path: /dev/null
        address:
          socket_address:
            address: 127.0.0.1
            port_value: 19000
      dynamic_resources:
        ads_config:
          api_type: DELTA_GRPC
          transport_api_version: V3
          grpc_services:
          - envoy_grpc:
              cluster_name: xds_cluster
          set_node_on_first_message_only: true
        lds_config:
          ads: {}
          resource_api_version: V3
        cds_config:
          ads: {}
          resource_api_version: V3
      static_resources:
        listeners:
        - name: envoy-gateway-proxy-ready-0.0.0.0-19001
          address:
            socket_address:
              address: 0.0.0.0
              port_value: 19001
              protocol: TCP
          filter_chains:
          - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: eg-ready-http
                route_config:
                  name: local_route
                http_filters:
                - name: envoy.filters.http.health_check
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.health_check.v3.HealthCheck
                    pass_through_mode: false
                    headers:
                    - name: ":path"
                      string_match:
                        exact: /ready
                - name: envoy.filters.http.router
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
        clusters:
        - connect_timeout: 10s
          load_assignment:
            cluster_name: xds_cluster
            endpoints:
            - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: envoy-gateway
                      port_value: 18000
          typed_extension_protocol_options:
            "envoy.extensions.upstreams.http.v3.HttpProtocolOptions":
               "@type": "type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions"
               "explicit_http_config":
                 "http2_protocol_options": {}
          name: xds_cluster
          type: STRICT_DNS
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
              common_tls_context:
                tls_params:
                  tls_maximum_protocol_version: TLSv1_3
                tls_certificate_sds_secret_configs:
                - name: xds_certificate
                  sds_config:
                    path_config_source:
                      path: "/sds/xds-certificate.json"
                    resource_api_version: V3
                validation_context_sds_secret_config:
                  name: xds_trusted_ca
                  sds_config:
                    path_config_source:
                      path: "/sds/xds-trusted-ca.json"
                    resource_api_version: V3
      layered_runtime:
        layers:
        - name: runtime-0
          rtds_layer:
            rtds_config:
              ads: {}
              resource_api_version: V3
            name: runtime-0
    logging: {}
    telemetry: {}
  status: {}
gatewayClass:
  metadata:
    creationTimestamp: null
    name: eg
    namespace: envoy-gateway-system
  spec:
    controllerName: gateway.envoyproxy.io/gatewayclass-controller
    parametersRef:
      group: config.gateway.envoyproxy.io
      kind: EnvoyProxy
      name: default-envoy-proxy
      namespace: envoy-gateway-system
  status:
    conditions:
    - lastTransitionTime: null
      message: Valid GatewayClass
      reason: Accepted
      status: "True"
      type: Accepted
gateways:
- metadata:
    creationTimestamp: null
    name: eg
    namespace: default
  spec:
    gatewayClassName: eg
    listeners:
    - name: tcp
      port: 1234
      protocol: TCP
    - name: udp
      port: 1234
      protocol: UDP
    - hostname: foo.com
      name: tls-passthrough
      port: 8443
      protocol: TLS
      tls:
        mode: Passthrough
    - allowedRoutes:
        kinds:
        - group: gateway.networking.k8s.io
          kind: HTTPRoute
      name: http
      port: 80
      protocol: HTTP
    - allowedRoutes:
        kinds:
        - group: gateway.networking.k8s.io
          kind: GRPCRoute
      name: grpc
      port: 8080
      protocol: HTTP
  status:
    listeners:
    - attachedRoutes: 1
      conditions:
      - lastTransitionTime: null
        message: Sending translated listener configuration to the data plane
        reason: Programmed
        status: "True"
        type: Programmed
      - lastTransitionTime: null
        message: Listener has been successfully translated
        reason: Accepted
        status: "True"
        type: Accepted
      name: tcp
      supportedKinds:
      - group: gateway.networking.k8s.io
        kind: TCPRoute
    - attachedRoutes: 1
      conditions:
      - lastTransitionTime: null
        message: Sending translated listener configuration to the data plane
        reason: Programmed
        status: "True"
        type: Programmed
      - lastTransitionTime: null
        message: Listener has been successfully translated
        reason: Accepted
        status: "True"
        type: Accepted
      name: udp
      supportedKinds:
      - group: gateway.networking.k8s.io
        kind: UDPRoute
    - attachedRoutes: 1
      conditions:
      - lastTransitionTime: null
        message: Sending translated listener configuration to the data plane
        reason: Programmed
        status: "True"
        type: Programmed
      - lastTransitionTime: null
        message: Listener has been successfully translated
        reason: Accepted
        status: "True"
        type: Accepted
      name: tls-passthrough
      supportedKinds:
      - group: gateway.networking.k8s.io
        kind: TLSRoute
    - attachedRoutes: 1
      conditions:
      - lastTransitionTime: null
        message: Sending translated listener configuration to the data plane
        reason: Programmed
        status: "True"
        type: Programmed
      - lastTransitionTime: null
        message: Listener has been successfully translated
        reason: Accepted
        status: "True"
        type: Accepted
      name: http
      supportedKinds:
      - group: gateway.networking.k8s.io
        kind: HTTPRoute
    - attachedRoutes: 1
      conditions:
      - lastTransitionTime: null
        message: Sending translated listener configuration to the data plane
        reason: Programmed
        status: "True"
        type: Programmed
      - lastTransitionTime: null
        message: Listener has been successfully translated
        reason: Accepted
        status: "True"
        type: Accepted
      name: grpc
      supportedKinds:
      - group: gateway.networking.k8s.io
        kind: GRPCRoute
grpcRoutes:
- kind: GRPCRoute
  metadata:
    creationTimestamp: null
    name: backend
    namespace: default
  spec:
    hostnames:
    - www.grpc-example.com
    parentRefs:
    - name: eg
      sectionName: grpc
    rules:
    - backendRefs:
      - group: ""
        kind: Service
        name: providedBackend
        port: 9000
        weight: 1
      matches:
      - method:
          method: DoThing
          service: com.example.Things
  status:
    parents:
    - conditions:
      - lastTransitionTime: null
        message: Route is accepted
        reason: Accepted
        status: "True"
        type: Accepted
      - lastTransitionTime: null
        message: Resolved all the Object references for the Route
        reason: ResolvedRefs
        status: "True"
        type: ResolvedRefs
      controllerName: gateway.envoyproxy.io/gatewayclass-controller
      parentRef:
        name: eg
        sectionName: grpc
httpRoutes:
- kind: HTTPRoute
  metadata:
    creationTimestamp: null
    name: backend
    namespace: default
  spec:
    hostnames:
    - www.example.com
    parentRefs:
    - name: eg
    rules:
    - backendRefs:
      - group: ""
        kind: Service
        name: providedBackend
        port: 8000
        weight: 1
      matches:
      - path:
          type: PathPrefix
          value: /
  status:
    parents:
    - conditions:
      - lastTransitionTime: null
        message: Route is accepted
        reason: Accepted
        status: "True"
        type: Accepted
      - lastTransitionTime: null
        message: Resolved all the Object references for the Route
        reason: ResolvedRefs
        status: "True"
        type: ResolvedRefs
      controllerName: gateway.envoyproxy.io/gatewayclass-controller
      parentRef:
        name: eg
tcpRoutes:
- kind: TCPRoute
  metadata:
    creationTimestamp: null
    name: backend
    namespace: default
  spec:
    parentRefs:
    - name: eg
      sectionName: tcp
    rules:
    - backendRefs:
      - group: ""
        kind: Service
        name: backend
        port: 3000
        weight: 1
  status:
    parents:
    - conditions:
      - lastTransitionTime: null
        message: Route is accepted
        reason: Accepted
        status: "True"
        type: Accepted
      - lastTransitionTime: null
        message: Resolved all the Object references for the Route
        reason: ResolvedRefs
        status: "True"
        type: ResolvedRefs
      controllerName: gateway.envoyproxy.io/gatewayclass-controller
      parentRef:
        name: eg
        sectionName: tcp
tlsRoutes:
- kind: TLSRoute
  metadata:
    creationTimestamp: null
    name: backend
    namespace: default
  spec:
    parentRefs:
    - name: eg
      sectionName: tls-passthrough
    rules:
    - backendRefs:
      - group: ""
        kind: Service
        name: backend
        port: 3000
        weight: 1
  status:
    parents:
    - conditions:
      - lastTransitionTime: null
        message: Route is accepted
        reason: Accepted
        status: "True"
        type: Accepted
      - lastTransitionTime: null
        message: Resolved all the Object references for the Route
        reason: ResolvedRefs
        status: "True"
        type: ResolvedRefs
      controllerName: gateway.envoyproxy.io/gatewayclass-controller
      parentRef:
        name: eg
        sectionName: tls-passthrough
udpRoutes:
- kind: UDPRoute
  metadata:
    creationTimestamp: null
    name: backend
    namespace: default
  spec:
    parentRefs:
    - name: eg
      sectionName: udp
    rules:
    - backendRefs:
      - group: ""
        kind: Service
        name: backend
        port: 3000
        weight: 1
  status:
    parents:
    - conditions:
      - lastTransitionTime: null
        message: Route is accepted
        reason: Accepted
        status: "True"
        type: Accepted
      - lastTransitionTime: null
        message: Resolved all the Object references for the Route
        reason: ResolvedRefs
        status: "True"
        type: ResolvedRefs
      controllerName: gateway.envoyproxy.io/gatewayclass-controller
      parentRef:
        name: eg
        sectionName: udp
xds:
  default/eg:
    configs:
    - '@type': type.googleapis.com/envoy.admin.v3.BootstrapConfigDump
      bootstrap:
        admin:
          accessLog:
          - name: envoy.access_loggers.file
            typedConfig:
              '@type': type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
              path: /dev/null
          address:
            socketAddress:
              address: 127.0.0.1
              portValue: 19000
        dynamicResources:
          adsConfig:
            apiType: DELTA_GRPC
            grpcServices:
            - envoyGrpc:
                clusterName: xds_cluster
            setNodeOnFirstMessageOnly: true
            transportApiVersion: V3
          cdsConfig:
            ads: {}
            resourceApiVersion: V3
          ldsConfig:
            ads: {}
            resourceApiVersion: V3
        layeredRuntime:
          layers:
          - name: runtime-0
            rtdsLayer:
              name: runtime-0
              rtdsConfig:
                ads: {}
                resourceApiVersion: V3
        staticResources:
          clusters:
          - connectTimeout: 10s
            loadAssignment:
              clusterName: xds_cluster
              endpoints:
              - lbEndpoints:
                - endpoint:
                    address:
                      socketAddress:
                        address: envoy-gateway
                        portValue: 18000
            name: xds_cluster
            transportSocket:
              name: envoy.transport_sockets.tls
              typedConfig:
                '@type': type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
                commonTlsContext:
                  tlsCertificateSdsSecretConfigs:
                  - name: xds_certificate
                    sdsConfig:
                      pathConfigSource:
                        path: /sds/xds-certificate.json
                      resourceApiVersion: V3
                  tlsParams:
                    tlsMaximumProtocolVersion: TLSv1_3
                  validationContextSdsSecretConfig:
                    name: xds_trusted_ca
                    sdsConfig:
                      pathConfigSource:
                        path: /sds/xds-trusted-ca.json
                      resourceApiVersion: V3
            type: STRICT_DNS
            typedExtensionProtocolOptions:
              envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
                '@type': type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
                explicitHttpConfig:
                  http2ProtocolOptions: {}
          listeners:
          - address:
              socketAddress:
                address: 0.0.0.0
                portValue: 19001
            filterChains:
            - filters:
              - name: envoy.filters.network.http_connection_manager
                typedConfig:
                  '@type': type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                  httpFilters:
                  - name: envoy.filters.http.health_check
                    typedConfig:
                      '@type': type.googleapis.com/envoy.extensions.filters.http.health_check.v3.HealthCheck
                      headers:
                      - name: :path
                        stringMatch:
                          exact: /ready
                      passThroughMode: false
                  - name: envoy.filters.http.router
                    typedConfig:
                      '@type': type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
                  routeConfig:
                    name: local_route
                  statPrefix: eg-ready-http
            name: envoy-gateway-proxy-ready-0.0.0.0-19001
    - '@type': type.googleapis.com/envoy.admin.v3.EndpointsConfigDump
      dynamicEndpointConfigs:
      - endpointConfig:
          '@type': type.googleapis.com/envoy.config.endpoint.v3.ClusterLoadAssignment
          clusterName: default/backend/rule/0/match/0-www.example.com
          endpoints:
          - lbEndpoints:
            - endpoint:
                address:
                  socketAddress:
                    address: 1.1.1.1
                    portValue: 8000
              loadBalancingWeight: 1
            loadBalancingWeight: 1
            locality: {}
      - endpointConfig:
          '@type': type.googleapis.com/envoy.config.endpoint.v3.ClusterLoadAssignment
          clusterName: default/backend/rule/0/match/0-www.grpc-example.com
          endpoints:
          - lbEndpoints:
            - endpoint:
                address:
                  socketAddress:
                    address: 1.1.1.1
                    portValue: 9000
              loadBalancingWeight: 1
            loadBalancingWeight: 1
            locality: {}
      - endpointConfig:
          '@type': type.googleapis.com/envoy.config.endpoint.v3.ClusterLoadAssignment
          clusterName: default/eg/tls-passthrough/backend
          endpoints:
          - lbEndpoints:
            - endpoint:
                address:
                  socketAddress:
                    address: 127.0.0.1
                    portValue: 3000
              loadBalancingWeight: 1
            loadBalancingWeight: 1
            locality: {}
      - endpointConfig:
          '@type': type.googleapis.com/envoy.config.endpoint.v3.ClusterLoadAssignment
          clusterName: default/eg/tcp/backend
          endpoints:
          - lbEndpoints:
            - endpoint:
                address:
                  socketAddress:
                    address: 127.0.0.1
                    portValue: 3000
            loadBalancingWeight: 1
            locality: {}
      - endpointConfig:
          '@type': type.googleapis.com/envoy.config.endpoint.v3.ClusterLoadAssignment
          clusterName: default/eg/udp/backend
          endpoints:
          - lbEndpoints:
            - endpoint:
                address:
                  socketAddress:
                    address: 127.0.0.1
                    portValue: 3000
            loadBalancingWeight: 1
            locality: {}
    - '@type': type.googleapis.com/envoy.admin.v3.ClustersConfigDump
      dynamicActiveClusters:
      - cluster:
          '@type': type.googleapis.com/envoy.config.cluster.v3.Cluster
          commonLbConfig:
            localityWeightedLbConfig: {}
          connectTimeout: 10s
          dnsLookupFamily: V4_ONLY
          edsClusterConfig:
            edsConfig:
              ads: {}
              resourceApiVersion: V3
            serviceName: default/backend/rule/0/match/0-www.example.com
          name: default/backend/rule/0/match/0-www.example.com
          outlierDetection: {}
          perConnectionBufferLimitBytes: 32768
          type: EDS
      - cluster:
          '@type': type.googleapis.com/envoy.config.cluster.v3.Cluster
          commonLbConfig:
            localityWeightedLbConfig: {}
          connectTimeout: 10s
          dnsLookupFamily: V4_ONLY
          edsClusterConfig:
            edsConfig:
              ads: {}
              resourceApiVersion: V3
            serviceName: default/backend/rule/0/match/0-www.grpc-example.com
          name: default/backend/rule/0/match/0-www.grpc-example.com
          outlierDetection: {}
          perConnectionBufferLimitBytes: 32768
          type: EDS
          typedExtensionProtocolOptions:
            envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
              '@type': type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
              explicitHttpConfig:
                http2ProtocolOptions: {}
      - cluster:
          '@type': type.googleapis.com/envoy.config.cluster.v3.Cluster
          commonLbConfig:
            localityWeightedLbConfig: {}
          connectTimeout: 10s
          dnsLookupFamily: V4_ONLY
          edsClusterConfig:
            edsConfig:
              ads: {}
              resourceApiVersion: V3
            serviceName: default/eg/tls-passthrough/backend
          name: default/eg/tls-passthrough/backend
          outlierDetection: {}
          perConnectionBufferLimitBytes: 32768
          type: EDS
      - cluster:
          '@type': type.googleapis.com/envoy.config.cluster.v3.Cluster
          commonLbConfig:
            localityWeightedLbConfig: {}
          connectTimeout: 10s
          dnsLookupFamily: V4_ONLY
          edsClusterConfig:
            edsConfig:
              ads: {}
              resourceApiVersion: V3
            serviceName: default/eg/tcp/backend
          name: default/eg/tcp/backend
          outlierDetection: {}
          perConnectionBufferLimitBytes: 32768
          type: EDS
      - cluster:
          '@type': type.googleapis.com/envoy.config.cluster.v3.Cluster
          commonLbConfig:
            localityWeightedLbConfig: {}
          connectTimeout: 10s
          dnsLookupFamily: V4_ONLY
          edsClusterConfig:
            edsConfig:
              ads: {}
              resourceApiVersion: V3
            serviceName: default/eg/udp/backend
          name: default/eg/udp/backend
          outlierDetection: {}
          perConnectionBufferLimitBytes: 32768
          type: EDS
    - '@type': type.googleapis.com/envoy.admin.v3.ListenersConfigDump
      dynamicListeners:
      - activeState:
          listener:
            '@type': type.googleapis.com/envoy.config.listener.v3.Listener
            accessLog:
            - filter:
                responseFlagFilter:
                  flags:
                  - NR
              name: envoy.access_loggers.file
              typedConfig:
                '@type': type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                logFormat:
                  textFormatSource:
                    inlineString: |
                      [%START_TIME%] "%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%" %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% "%REQ(X-FORWARDED-FOR)%" "%REQ(USER-AGENT)%" "%REQ(X-REQUEST-ID)%" "%REQ(:AUTHORITY)%" "%UPSTREAM_HOST%"
                path: /dev/stdout
            address:
              socketAddress:
                address: 0.0.0.0
                portValue: 10080
            defaultFilterChain:
              filters:
              - name: envoy.filters.network.http_connection_manager
                typedConfig:
                  '@type': type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                  accessLog:
                  - name: envoy.access_loggers.file
                    typedConfig:
                      '@type': type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                      logFormat:
                        textFormatSource:
                          inlineString: |
                            [%START_TIME%] "%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%" %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% "%REQ(X-FORWARDED-FOR)%" "%REQ(USER-AGENT)%" "%REQ(X-REQUEST-ID)%" "%REQ(:AUTHORITY)%" "%UPSTREAM_HOST%"
                      path: /dev/stdout
                  commonHttpProtocolOptions:
                    headersWithUnderscoresAction: REJECT_REQUEST
                  http2ProtocolOptions:
                    initialConnectionWindowSize: 1048576
                    initialStreamWindowSize: 65536
                    maxConcurrentStreams: 100
                  httpFilters:
                  - name: envoy.filters.http.router
                    typedConfig:
                      '@type': type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
                  mergeSlashes: true
                  normalizePath: true
                  pathWithEscapedSlashesAction: UNESCAPE_AND_REDIRECT
                  rds:
                    configSource:
                      ads: {}
                      resourceApiVersion: V3
                    routeConfigName: default/eg/http
                  statPrefix: http
                  upgradeConfigs:
                  - upgradeType: websocket
                  useRemoteAddress: true
            name: default/eg/http
            perConnectionBufferLimitBytes: 32768
      - activeState:
          listener:
            '@type': type.googleapis.com/envoy.config.listener.v3.Listener
            accessLog:
            - filter:
                responseFlagFilter:
                  flags:
                  - NR
              name: envoy.access_loggers.file
              typedConfig:
                '@type': type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                logFormat:
                  textFormatSource:
                    inlineString: |
                      [%START_TIME%] "%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%" %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% "%REQ(X-FORWARDED-FOR)%" "%REQ(USER-AGENT)%" "%REQ(X-REQUEST-ID)%" "%REQ(:AUTHORITY)%" "%UPSTREAM_HOST%"
                path: /dev/stdout
            address:
              socketAddress:
                address: 0.0.0.0
                portValue: 8080
            defaultFilterChain:
              filters:
              - name: envoy.filters.network.http_connection_manager
                typedConfig:
                  '@type': type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                  accessLog:
                  - name: envoy.access_loggers.file
                    typedConfig:
                      '@type': type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                      logFormat:
                        textFormatSource:
                          inlineString: |
                            [%START_TIME%] "%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%" %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% "%REQ(X-FORWARDED-FOR)%" "%REQ(USER-AGENT)%" "%REQ(X-REQUEST-ID)%" "%REQ(:AUTHORITY)%" "%UPSTREAM_HOST%"
                      path: /dev/stdout
                  commonHttpProtocolOptions:
                    headersWithUnderscoresAction: REJECT_REQUEST
                  http2ProtocolOptions:
                    initialConnectionWindowSize: 1048576
                    initialStreamWindowSize: 65536
                    maxConcurrentStreams: 100
                  httpFilters:
                  - name: envoy.filters.http.grpc_web
                    typedConfig:
                      '@type': type.googleapis.com/envoy.extensions.filters.http.grpc_web.v3.GrpcWeb
                  - name: envoy.filters.http.grpc_stats
                    typedConfig:
                      '@type': type.googleapis.com/envoy.extensions.filters.http.grpc_stats.v3.FilterConfig
                      emitFilterState: true
                      statsForAllMethods: true
                  - name: envoy.filters.http.router
                    typedConfig:
                      '@type': type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
                  mergeSlashes: true
                  normalizePath: true
                  pathWithEscapedSlashesAction: UNESCAPE_AND_REDIRECT
                  rds:
                    configSource:
                      ads: {}
                      resourceApiVersion: V3
                    routeConfigName: default/eg/grpc
                  statPrefix: http
                  useRemoteAddress: true
            name: default/eg/grpc
            perConnectionBufferLimitBytes: 32768
      - activeState:
          listener:
            '@type': type.googleapis.com/envoy.config.listener.v3.Listener
            accessLog:
            - filter:
                responseFlagFilter:
                  flags:
                  - NR
              name: envoy.access_loggers.file
              typedConfig:
                '@type': type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                logFormat:
                  textFormatSource:
                    inlineString: |
                      [%START_TIME%] "%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%" %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% "%REQ(X-FORWARDED-FOR)%" "%REQ(USER-AGENT)%" "%REQ(X-REQUEST-ID)%" "%REQ(:AUTHORITY)%" "%UPSTREAM_HOST%"
                path: /dev/stdout
            address:
              socketAddress:
                address: 0.0.0.0
                portValue: 8443
            filterChains:
            - filterChainMatch:
                serverNames:
                - foo.com
              filters:
              - name: envoy.filters.network.tcp_proxy
                typedConfig:
                  '@type': type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
                  accessLog:
                  - name: envoy.access_loggers.file
                    typedConfig:
                      '@type': type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                      logFormat:
                        textFormatSource:
                          inlineString: |
                            [%START_TIME%] "%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%" %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% "%REQ(X-FORWARDED-FOR)%" "%REQ(USER-AGENT)%" "%REQ(X-REQUEST-ID)%" "%REQ(:AUTHORITY)%" "%UPSTREAM_HOST%"
                      path: /dev/stdout
                  cluster: default/eg/tls-passthrough/backend
                  statPrefix: passthrough
            listenerFilters:
            - name: envoy.filters.listener.tls_inspector
              typedConfig:
                '@type': type.googleapis.com/envoy.extensions.filters.listener.tls_inspector.v3.TlsInspector
            name: default/eg/tls-passthrough/backend
            perConnectionBufferLimitBytes: 32768
      - activeState:
          listener:
            '@type': type.googleapis.com/envoy.config.listener.v3.Listener
            accessLog:
            - filter:
                responseFlagFilter:
                  flags:
                  - NR
              name: envoy.access_loggers.file
              typedConfig:
                '@type': type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                logFormat:
                  textFormatSource:
                    inlineString: |
                      [%START_TIME%] "%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%" %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% "%REQ(X-FORWARDED-FOR)%" "%REQ(USER-AGENT)%" "%REQ(X-REQUEST-ID)%" "%REQ(:AUTHORITY)%" "%UPSTREAM_HOST%"
                path: /dev/stdout
            address:
              socketAddress:
                address: 0.0.0.0
                portValue: 1234
            filterChains:
            - filters:
              - name: envoy.filters.network.tcp_proxy
                typedConfig:
                  '@type': type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
                  accessLog:
                  - name: envoy.access_loggers.file
                    typedConfig:
                      '@type': type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                      logFormat:
                        textFormatSource:
                          inlineString: |
                            [%START_TIME%] "%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%" %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% "%REQ(X-FORWARDED-FOR)%" "%REQ(USER-AGENT)%" "%REQ(X-REQUEST-ID)%" "%REQ(:AUTHORITY)%" "%UPSTREAM_HOST%"
                      path: /dev/stdout
                  cluster: default/eg/tcp/backend
                  statPrefix: tcp
            name: default/eg/tcp/backend
            perConnectionBufferLimitBytes: 32768
      - activeState:
          listener:
            '@type': type.googleapis.com/envoy.config.listener.v3.Listener
            accessLog:
            - filter:
                responseFlagFilter:
                  flags:
                  - NR
              name: envoy.access_loggers.file
              typedConfig:
                '@type': type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                logFormat:
                  textFormatSource:
                    inlineString: |
                      [%START_TIME%] "%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%" %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% "%REQ(X-FORWARDED-FOR)%" "%REQ(USER-AGENT)%" "%REQ(X-REQUEST-ID)%" "%REQ(:AUTHORITY)%" "%UPSTREAM_HOST%"
                path: /dev/stdout
            address:
              socketAddress:
                address: 0.0.0.0
                portValue: 1234
                protocol: UDP
            listenerFilters:
            - name: envoy.filters.udp_listener.udp_proxy
              typedConfig:
                '@type': type.googleapis.com/envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig
                accessLog:
                - name: envoy.access_loggers.file
                  typedConfig:
                    '@type': type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                    logFormat:
                      textFormatSource:
                        inlineString: |
                          [%START_TIME%] "%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%" %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% "%REQ(X-FORWARDED-FOR)%" "%REQ(USER-AGENT)%" "%REQ(X-REQUEST-ID)%" "%REQ(:AUTHORITY)%" "%UPSTREAM_HOST%"
                    path: /dev/stdout
                matcher:
                  onNoMatch:
                    action:
                      name: route
                      typedConfig:
                        '@type': type.googleapis.com/envoy.extensions.filters.udp.udp_proxy.v3.Route
                        cluster: default/eg/udp/backend
                statPrefix: service
            name: default/eg/udp/backend
    - '@type': type.googleapis.com/envoy.admin.v3.RoutesConfigDump
      dynamicRouteConfigs:
      - routeConfig:
          '@type': type.googleapis.com/envoy.config.route.v3.RouteConfiguration
          ignorePortInHostMatching: true
          name: default/eg/http
          virtualHosts:
          - domains:
            - '*'
            name: default/eg/http
            routes:
            - match:
                headers:
                - name: :authority
                  stringMatch:
                    exact: www.example.com
                prefix: /
              name: default/backend/rule/0/match/0-www.example.com
              route:
                cluster: default/backend/rule/0/match/0-www.example.com
      - routeConfig:
          '@type': type.googleapis.com/envoy.config.route.v3.RouteConfiguration
          ignorePortInHostMatching: true
          name: default/eg/grpc
          virtualHosts:
          - domains:
            - '*'
            name: default/eg/grpc
            routes:
            - match:
                headers:
                - name: :authority
                  stringMatch:
                    exact: www.grpc-example.com
                path: /com.example.Things/DoThing
              name: default/backend/rule/0/match/0-www.grpc-example.com
              route:
                cluster: default/backend/rule/0/match/0-www.grpc-example.com
