---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.13.0
  name: securitypolicies.gateway.envoyproxy.io
spec:
  group: gateway.envoyproxy.io
  names:
    kind: SecurityPolicy
    listKind: SecurityPolicyList
    plural: securitypolicies
    shortNames:
    - sp
    singular: securitypolicy
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=="Accepted")].reason
      name: Status
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: SecurityPolicy allows the user to configure various security
          settings for a Gateway.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Spec defines the desired state of SecurityPolicy.
            properties:
              basicAuth:
                description: BasicAuth defines the configuration for the HTTP Basic
                  Authentication.
                properties:
                  users:
                    description: "The Kubernetes secret which contains the username-password
                      pairs in htpasswd format, used to verify user credentials in
                      the \"Authorization\" header. \n This is an Opaque secret. The
                      username-password pairs should be stored in the key \".htpasswd\".
                      As the key name indicates, the value needs to be the htpasswd
                      format, for example: \"user1:{SHA}hashed_user1_password\". Right
                      now, only SHA hash algorithm is supported. Reference to https://httpd.apache.org/docs/2.4/programs/htpasswd.html
                      for more details. \n Note: The secret must be in the same namespace
                      as the SecurityPolicy."
                    properties:
                      group:
                        default: ""
                        description: Group is the group of the referent. For example,
                          "gateway.networking.k8s.io". When unspecified or empty string,
                          core API group is inferred.
                        maxLength: 253
                        pattern: ^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
                        type: string
                      kind:
                        default: Secret
                        description: Kind is kind of the referent. For example "Secret".
                        maxLength: 63
                        minLength: 1
                        pattern: ^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$
                        type: string
                      name:
                        description: Name is the name of the referent.
                        maxLength: 253
                        minLength: 1
                        type: string
                      namespace:
                        description: "Namespace is the namespace of the referenced
                          object. When unspecified, the local namespace is inferred.
                          \n Note that when a namespace different than the local namespace
                          is specified, a ReferenceGrant object is required in the
                          referent namespace to allow that namespace's owner to accept
                          the reference. See the ReferenceGrant documentation for
                          details. \n Support: Core"
                        maxLength: 63
                        minLength: 1
                        pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$
                        type: string
                    required:
                    - name
                    type: object
                required:
                - users
                type: object
              cors:
                description: CORS defines the configuration for Cross-Origin Resource
                  Sharing (CORS).
                properties:
                  allowCredentials:
                    description: AllowCredentials indicates whether a request can
                      include user credentials like cookies, authentication headers,
                      or TLS client certificates.
                    type: boolean
                  allowHeaders:
                    description: AllowHeaders defines the headers that are allowed
                      to be sent with requests.
                    items:
                      type: string
                    type: array
                  allowMethods:
                    description: AllowMethods defines the methods that are allowed
                      to make requests.
                    items:
                      type: string
                    minItems: 1
                    type: array
                  allowOrigins:
                    description: AllowOrigins defines the origins that are allowed
                      to make requests.
                    items:
                      description: "Origin is defined by the scheme (protocol), hostname
                        (domain), and port of the URL used to access it. The hostname
                        can be “precise” which is just the domain name or “wildcard”
                        which is a domain name prefixed with a single wildcard label
                        such as “*.example.com”. \n For example, the following are
                        valid origins: - https://foo.example.com - https://*.example.com
                        - http://foo.example.com:8080 - http://*.example.com:8080"
                      maxLength: 253
                      minLength: 1
                      pattern: ^https?:\/\/(\*\.)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*(:[0-9]+)?$
                      type: string
                    minItems: 1
                    type: array
                  exposeHeaders:
                    description: ExposeHeaders defines the headers that can be exposed
                      in the responses.
                    items:
                      type: string
                    type: array
                  maxAge:
                    description: MaxAge defines how long the results of a preflight
                      request can be cached.
                    type: string
                type: object
              jwt:
                description: JWT defines the configuration for JSON Web Token (JWT)
                  authentication.
                properties:
                  providers:
                    description: Providers defines the JSON Web Token (JWT) authentication
                      provider type. When multiple JWT providers are specified, the
                      JWT is considered valid if any of the providers successfully
                      validate the JWT. For additional details, see https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/jwt_authn_filter.html.
                    items:
                      description: JWTProvider defines how a JSON Web Token (JWT)
                        can be verified.
                      properties:
                        audiences:
                          description: Audiences is a list of JWT audiences allowed
                            access. For additional details, see https://tools.ietf.org/html/rfc7519#section-4.1.3.
                            If not provided, JWT audiences are not checked.
                          items:
                            type: string
                          maxItems: 8
                          type: array
                        claimToHeaders:
                          description: 'ClaimToHeaders is a list of JWT claims that
                            must be extracted into HTTP request headers For examples,
                            following config: The claim must be of type; string, int,
                            double, bool. Array type claims are not supported'
                          items:
                            description: ClaimToHeader defines a configuration to
                              convert JWT claims into HTTP headers
                            properties:
                              claim:
                                description: 'Claim is the JWT Claim that should be
                                  saved into the header : it can be a nested claim
                                  of type (eg. "claim.nested.key", "sub"). The nested
                                  claim name must use dot "." to separate the JSON
                                  name path.'
                                type: string
                              header:
                                description: Header defines the name of the HTTP request
                                  header that the JWT Claim will be saved into.
                                type: string
                            required:
                            - claim
                            - header
                            type: object
                          type: array
                        extractFrom:
                          description: ExtractFrom defines different ways to extract
                            the JWT token from HTTP request. If empty, it defaults
                            to extract JWT token from the Authorization HTTP request
                            header using Bearer schema or access_token from query
                            parameters.
                          properties:
                            cookies:
                              description: Cookies represents a list of cookie names
                                to extract the JWT token from. If specified, Envoy
                                will extract the JWT token from the listed cookies
                                and validate each of them. If any cookie is found
                                to be an invalid JWT, a 401 error will be returned.
                              items:
                                type: string
                              type: array
                          type: object
                        issuer:
                          description: Issuer is the principal that issued the JWT
                            and takes the form of a URL or email address. For additional
                            details, see https://tools.ietf.org/html/rfc7519#section-4.1.1
                            for URL format and https://rfc-editor.org/rfc/rfc5322.html
                            for email format. If not provided, the JWT issuer is not
                            checked.
                          maxLength: 253
                          type: string
                        name:
                          description: Name defines a unique name for the JWT provider.
                            A name can have a variety of forms, including RFC1123
                            subdomains, RFC 1123 labels, or RFC 1035 labels.
                          maxLength: 253
                          minLength: 1
                          type: string
                        remoteJWKS:
                          description: RemoteJWKS defines how to fetch and cache JSON
                            Web Key Sets (JWKS) from a remote HTTP/HTTPS endpoint.
                          properties:
                            uri:
                              description: URI is the HTTPS URI to fetch the JWKS.
                                Envoy's system trust bundle is used to validate the
                                server certificate.
                              maxLength: 253
                              minLength: 1
                              type: string
                          required:
                          - uri
                          type: object
                      required:
                      - name
                      - remoteJWKS
                      type: object
                    maxItems: 4
                    minItems: 1
                    type: array
                required:
                - providers
                type: object
              oidc:
                description: OIDC defines the configuration for the OpenID Connect
                  (OIDC) authentication.
                properties:
                  clientID:
                    description: The client ID to be used in the OIDC [Authentication
                      Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).
                    minLength: 1
                    type: string
                  clientSecret:
                    description: "The Kubernetes secret which contains the OIDC client
                      secret to be used in the [Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).
                      \n This is an Opaque secret. The client secret should be stored
                      in the key \"client-secret\"."
                    properties:
                      group:
                        default: ""
                        description: Group is the group of the referent. For example,
                          "gateway.networking.k8s.io". When unspecified or empty string,
                          core API group is inferred.
                        maxLength: 253
                        pattern: ^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
                        type: string
                      kind:
                        default: Secret
                        description: Kind is kind of the referent. For example "Secret".
                        maxLength: 63
                        minLength: 1
                        pattern: ^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$
                        type: string
                      name:
                        description: Name is the name of the referent.
                        maxLength: 253
                        minLength: 1
                        type: string
                      namespace:
                        description: "Namespace is the namespace of the referenced
                          object. When unspecified, the local namespace is inferred.
                          \n Note that when a namespace different than the local namespace
                          is specified, a ReferenceGrant object is required in the
                          referent namespace to allow that namespace's owner to accept
                          the reference. See the ReferenceGrant documentation for
                          details. \n Support: Core"
                        maxLength: 63
                        minLength: 1
                        pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$
                        type: string
                    required:
                    - name
                    type: object
                  provider:
                    description: The OIDC Provider configuration.
                    properties:
                      authorizationEndpoint:
                        description: The OIDC Provider's [authorization endpoint](https://openid.net/specs/openid-connect-core-1_0.html#AuthorizationEndpoint).
                          If not provided, EG will try to discover it from the provider's
                          [Well-Known Configuration Endpoint](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfigurationResponse).
                        type: string
                      issuer:
                        description: The OIDC Provider's [issuer identifier](https://openid.net/specs/openid-connect-discovery-1_0.html#IssuerDiscovery).
                          Issuer MUST be a URI RFC 3986 [RFC3986] with a scheme component
                          that MUST be https, a host component, and optionally, port
                          and path components and no query or fragment components.
                        minLength: 1
                        type: string
                      tokenEndpoint:
                        description: The OIDC Provider's [token endpoint](https://openid.net/specs/openid-connect-core-1_0.html#TokenEndpoint).
                          If not provided, EG will try to discover it from the provider's
                          [Well-Known Configuration Endpoint](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfigurationResponse).
                        type: string
                    required:
                    - issuer
                    type: object
                  scopes:
                    description: The OIDC scopes to be used in the [Authentication
                      Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).
                      The "openid" scope is always added to the list of scopes if
                      not already specified.
                    items:
                      type: string
                    type: array
                required:
                - clientID
                - clientSecret
                - provider
                type: object
              targetRef:
                description: TargetRef is the name of the Gateway resource this policy
                  is being attached to. This Policy and the TargetRef MUST be in the
                  same namespace for this Policy to have effect and be applied to
                  the Gateway. TargetRef
                properties:
                  group:
                    description: Group is the group of the target resource.
                    maxLength: 253
                    pattern: ^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
                    type: string
                  kind:
                    description: Kind is kind of the target resource.
                    maxLength: 63
                    minLength: 1
                    pattern: ^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$
                    type: string
                  name:
                    description: Name is the name of the target resource.
                    maxLength: 253
                    minLength: 1
                    type: string
                  namespace:
                    description: Namespace is the namespace of the referent. When
                      unspecified, the local namespace is inferred. Even when policy
                      targets a resource in a different namespace, it MUST only apply
                      to traffic originating from the same namespace as the policy.
                    maxLength: 63
                    minLength: 1
                    pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$
                    type: string
                  sectionName:
                    description: "SectionName is the name of a section within the
                      target resource. When unspecified, this targetRef targets the
                      entire resource. In the following resources, SectionName is
                      interpreted as the following: \n * Gateway: Listener Name *
                      Service: Port Name \n If a SectionName is specified, but does
                      not exist on the targeted object, the Policy must fail to attach,
                      and the policy implementation should record a `ResolvedRefs`
                      or similar Condition in the Policy's status."
                    maxLength: 253
                    minLength: 1
                    pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
                    type: string
                required:
                - group
                - kind
                - name
                type: object
                x-kubernetes-validations:
                - message: this policy can only have a targetRef.group of gateway.networking.k8s.io
                  rule: self.group == 'gateway.networking.k8s.io'
                - message: this policy can only have a targetRef.kind of Gateway/HTTPRoute/GRPCRoute
                  rule: self.kind in ['Gateway', 'HTTPRoute', 'GRPCRoute']
                - message: this policy does not yet support the sectionName field
                  rule: '!has(self.sectionName)'
            required:
            - targetRef
            type: object
          status:
            description: Status defines the current status of SecurityPolicy.
            properties:
              conditions:
                description: Conditions describe the current conditions of the SecurityPolicy.
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    \n type FooStatus struct{ // Represents the observations of a
                    foo's current state. // Known .status.conditions.type are: \"Available\",
                    \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                    // +listType=map // +listMapKey=type Conditions []metav1.Condition
                    `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                    protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                maxItems: 8
                type: array
                x-kubernetes-list-map-keys:
                - type
                x-kubernetes-list-type: map
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
