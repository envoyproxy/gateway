name: Benchmarking Tests at Scale
on:
  pull_request:
    branches:
    - "main"
    - "release/v*"
  workflow_dispatch:
    inputs:
      rps:
        description: "The target requests-per-second rate. Default: 1000"
        default: '1000'
        type: string
        required: false
      connections:
        description: "The maximum allowed number of concurrent connections per event loop. HTTP/1 only. Default: 100."
        default: '100'
        type: string
        required: false
      duration:
        description: "The number of seconds that the test should run. Default: 90."
        default: '90'
        type: string
        required: false
      httproute_num:
        description: "The number of httproutes that the test should apply. Default: 1."
        default: '1'
        type: string
        required: false

jobs:
  benchmark-test:
    name: Benchmark Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: ./tools/github-actions/setup-deps

      - name: Download Nighthawk Docker images
        run: |
          docker pull envoyproxy/nighthawk-dev:latest
        
      - name: Run Benchmark tests
        env:
          KIND_NODE_TAG: v1.29.0
          IMAGE_PULL_POLICY: IfNotPresent
          RPS: ${{ github.event.inputs.rps || 1000 }}
          CONNECTIONS: ${{ github.event.inputs.connections || 100 }}
          DURATION: ${{ github.event.inputs.duration || 90 }}
          HTTPROUTE_NUM: ${{ github.event.inputs.httproute_num || 1 }}
        run: make benchmark
      
     # - name: Setup Kubernetes
     #   uses: medyagh/setup-minikube@master

     # - name: Install Envoy Gateway Pods via Kubernetes Yaml
     #   run: kubectl apply -f https://github.com/envoyproxy/gateway/releases/download/latest/install.yaml

     # - name: Wait for Envoy Gateway to become available
     #   run: kubectl wait --timeout=5m -n envoy-gateway-system deployment/envoy-gateway --for=condition=Available
     #   
     # - name: Install the GatewayClass, Gateway, HTTPRoute and example app
     #   run: kubectl apply -f https://github.com/envoyproxy/gateway/releases/download/latest/quickstart.yaml -n default
     #   
     # - name: Wait for example app to become available
     #   run: kubectl wait --timeout=5m -n default deployment/backend --for=condition=Available
     # 
     # - name: Get the name of the Envoy service created the by the example Gateway
     #   run: |
     #     echo "ENVOY_SERVICE=$(kubectl get svc -n envoy-gateway-system --selector=gateway.envoyproxy.io/owning-gateway-namespace=default,gateway.envoyproxy.io/owning-gateway-name=eg -o jsonpath='{.items[0].metadata.name}')" >> $GITHUB_ENV

     # - name: Echo ENVOY_SERVICE 
     #   run: echo ${{ env.ENVOY_SERVICE }}
     # 
     # - name: Port forward to the Envoy service
     #   run: kubectl -n envoy-gateway-system port-forward service/${ENVOY_SERVICE} 8888:80 &
     # 
     # - name: Curl the example app through Envoy proxy
     #   run: |
     #     curl --verbose --header "Host: www.example.com" http://localhost:8888/get

      #- name: Apply Gateway Configurations
      #  
      #- name: Setup Test Server Pods

      #- name: Setup Prometheus Pods

      #- name: Setup Load Gernerator

      #- name: Run Performance Tests

      #- name: Collect Test Results
