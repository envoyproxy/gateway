// Copyright Envoy Gateway Authors
// SPDX-License-Identifier: Apache-2.0
// The full text of the Apache license is available in the LICENSE file at
// the root of the repo.

//go:build e2e
// +build e2e

package tests

import (
	_ "embed"
	"testing"

	"k8s.io/apimachinery/pkg/types"
	"sigs.k8s.io/gateway-api/conformance/utils/http"
	"sigs.k8s.io/gateway-api/conformance/utils/kubernetes"
	"sigs.k8s.io/gateway-api/conformance/utils/suite"
)

func init() {
	ConformanceTests = append(ConformanceTests, ClientTimeoutTest)
}

var largeHeader = "# Copy from https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/base/manifests.yaml\n# This file contains the base resources that most conformance tests will rely\n# on. This includes 3 namespaces along with Gateways, Services and Deployments\n# that can be used as backends for routing traffic. The most important\n# resources included are the Gateways (all in the gateway-conformance-infra\n# namespace):\n# - same-namespace (only supports route in same ns)\n# - all-namespaces (supports routes in all ns)\n# - backend-namespaces (supports routes in ns with backend label)\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: gateway-conformance-infra\n  labels:\n    gateway-conformance: infra\n---\napiVersion: gateway.networking.k8s.io/v1\nkind: Gateway\nmetadata:\n  name: same-namespace\n  namespace: gateway-conformance-infra\nspec:\n  gatewayClassName: \"{GATEWAY_CLASS_NAME}\"\n  listeners:\n  - name: http\n    port: 80\n    protocol: HTTP\n    allowedRoutes:\n      namespaces:\n        from: Same\n---\napiVersion: gateway.networking.k8s.io/v1\nkind: Gateway\nmetadata:\n  name: all-namespaces\n  namespace: gateway-conformance-infra\nspec:\n  gatewayClassName: \"{GATEWAY_CLASS_NAME}\"\n  listeners:\n  - name: http\n    port: 80\n    protocol: HTTP\n    allowedRoutes:\n      namespaces:\n        from: All\n---\napiVersion: gateway.networking.k8s.io/v1\nkind: Gateway\nmetadata:\n  name: backend-namespaces\n  namespace: gateway-conformance-infra\nspec:\n  gatewayClassName: \"{GATEWAY_CLASS_NAME}\"\n  listeners:\n  - name: http\n    port: 80\n    protocol: HTTP\n    allowedRoutes:\n      namespaces:\n        from: Selector\n        selector:\n          matchLabels:\n            gateway-conformance: backend\n---\napiVersion: gateway.networking.k8s.io/v1beta1\nkind: Gateway\nmetadata:\n  name: my-tcp-gateway\n  namespace: gateway-conformance-infra\nspec:\n  gatewayClassName: \"{GATEWAY_CLASS_NAME}\"\n  listeners:\n  - name: foo\n    protocol: TCP\n    port: 8080\n    allowedRoutes:\n      kinds:\n      - kind: TCPRoute\n  - name: bar\n    protocol: TCP\n    port: 8090\n    allowedRoutes:\n      kinds:\n      - kind: TCPRoute\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: infra-backend-v1\n  namespace: gateway-conformance-infra\nspec:\n  selector:\n    app: infra-backend-v1\n  ports:\n  - protocol: TCP\n    port: 8080\n    targetPort: 3000\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: infra-backend-v1\n  namespace: gateway-conformance-infra\n  labels:\n    app: infra-backend-v1\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: infra-backend-v1\n  template:\n    metadata:\n      labels:\n        app: infra-backend-v1\n    spec:\n      containers:\n      - name: infra-backend-v1\n        # From https://github.com/kubernetes-sigs/ingress-controller-conformance/tree/master/images/echoserver\n        image: gcr.io/k8s-staging-ingressconformance/echoserver:v20221109-7ee2f3e\n        env:\n        - name: POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        resources:\n          requests:\n            cpu: 10m\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: infra-backend-v2\n  namespace: gateway-conformance-infra\nspec:\n  selector:\n    app: infra-backend-v2\n  ports:\n  - protocol: TCP\n    port: 8080\n    targetPort: 3000\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: infra-backend-v2\n  namespace: gateway-conformance-infra\n  labels:\n    app: infra-backend-v2\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: infra-backend-v2\n  template:\n    metadata:\n      labels:\n        app: infra-backend-v2\n    spec:\n      containers:\n      - name: infra-backend-v2\n        image: gcr.io/k8s-staging-ingressconformance/echoserver:v20221109-7ee2f3e\n        env:\n        - name: POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        resources:\n          requests:\n            cpu: 10m\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: infra-backend-v3\n  namespace: gateway-conformance-infra\nspec:\n  selector:\n    app: infra-backend-v3\n  ports:\n  - protocol: TCP\n    port: 8080\n    targetPort: 3000\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: infra-backend-v3\n  namespace: gateway-conformance-infra\n  labels:\n    app: infra-backend-v3\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: infra-backend-v3\n  template:\n    metadata:\n      labels:\n        app: infra-backend-v3\n    spec:\n      containers:\n      - name: infra-backend-v3\n        image: gcr.io/k8s-staging-ingressconformance/echoserver:v20221109-7ee2f3e\n        env:\n        - name: POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        resources:\n          requests:\n            cpu: 10m\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: tls-backend\n  namespace: gateway-conformance-infra\nspec:\n  selector:\n    app: tls-backend\n  ports:\n  - protocol: TCP\n    port: 443\n    targetPort: 8443\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: tls-backend\n  namespace: gateway-conformance-infra\n  labels:\n    app: tls-backend\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: tls-backend\n  template:\n    metadata:\n      labels:\n        app: tls-backend\n    spec:\n      containers:\n      - name: tls-backend\n        image: gcr.io/k8s-staging-ingressconformance/echoserver:v20221109-7ee2f3e\n        volumeMounts:\n        - name: secret-volume\n          mountPath: /etc/secret-volume\n        env:\n        - name: POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: TLS_SERVER_CERT\n          value: /etc/secret-volume/crt\n        - name: TLS_SERVER_PRIVKEY\n          value: /etc/secret-volume/key\n        resources:\n          requests:\n            cpu: 10m\n      volumes:\n      - name: secret-volume\n        secret:\n          secretName: tls-passthrough-checks-certificate\n          items:\n          - key: tls.crt\n            path: crt\n          - key: tls.key\n            path: key\n---\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: gateway-conformance-app-backend\n  labels:\n    gateway-conformance: backend\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: app-backend-v1\n  namespace: gateway-conformance-app-backend\nspec:\n  selector:\n    app: app-backend-v1\n  ports:\n  - protocol: TCP\n    port: 8080\n    targetPort: 3000\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: app-backend-v1\n  namespace: gateway-conformance-app-backend\n  labels:\n    app: app-backend-v1\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: app-backend-v1\n  template:\n    metadata:\n      labels:\n        app: app-backend-v1\n    spec:\n      containers:\n      - name: app-backend-v1\n        image: gcr.io/k8s-staging-ingressconformance/echoserver:v20221109-7ee2f3e\n        env:\n        - name: POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        resources:\n          requests:\n            cpu: 10m\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: app-backend-v2\n  namespace: gateway-conformance-app-backend\nspec:\n  selector:\n    app: app-backend-v2\n  ports:\n  - protocol: TCP\n    port: 8080\n    targetPort: 3000\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: app-backend-v2\n  namespace: gateway-conformance-app-backend\n  labels:\n    app: app-backend-v2\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: app-backend-v2\n  template:\n    metadata:\n      labels:\n        app: app-backend-v2\n    spec:\n      containers:\n      - name: app-backend-v2\n        image: gcr.io/k8s-staging-ingressconformance/echoserver:v20221109-7ee2f3e\n        env:\n        - name: POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        resources:\n          requests:\n            cpu: 10m\n---\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: gateway-conformance-web-backend\n  labels:\n    gateway-conformance: backend\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: web-backend\n  namespace: gateway-conformance-web-backend\nspec:\n  selector:\n    app: web-backend\n  ports:\n  - protocol: TCP\n    port: 8080\n    targetPort: 3000\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: web-backend\n  namespace: gateway-conformance-web-backend\n  labels:\n    app: web-backend\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: web-backend\n  template:\n    metadata:\n      labels:\n        app: web-backend\n    spec:\n      containers:\n      - name: web-backend\n        image: gcr.io/k8s-staging-ingressconformance/echoserver:v20221109-7ee2f3e\n        env:\n        - name: POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        resources:\n          requests:\n            cpu: 10m\n---\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: gateway-conformance-udp\n  labels:\n    gateway-conformance: udp\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: coredns\n  namespace: gateway-conformance-udp\n  labels:\n    app: udp\nspec:\n  ports:\n  - name: udp-dns\n    port: 53\n    protocol: UDP\n    targetPort: 53\n  selector:\n    app: udp\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: coredns\n  namespace: gateway-conformance-udp\n  labels:\n    app: udp\nspec:\n  selector:\n    matchLabels:\n      app: udp\n  template:\n    metadata:\n      labels:\n        app: udp\n    spec:\n      containers:\n      - args:\n        - -conf\n        - /root/Corefile\n        image: coredns/coredns\n        name: coredns\n        volumeMounts:\n        - mountPath: /root\n          name: conf\n      volumes:\n      - configMap:\n          defaultMode: 420\n          name: coredns\n        name: conf\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: coredns\n  namespace: gateway-conformance-udp\ndata:\n  Corefile: |\n    .:53 {\n        forward . 8.8.8.8 9.9.9.9\n        log\n        errors\n    }\n\n    foo.bar.com:53 {\n      whoami\n    }\n---\napiVersion: gateway.networking.k8s.io/v1beta1\nkind: Gateway\nmetadata:\n  name: udp-gateway\n  namespace: gateway-conformance-udp\nspec:\n  gatewayClassName: \"{GATEWAY_CLASS_NAME}\"\n  listeners:\n  - name: coredns\n    protocol: UDP\n    port: 5300\n    allowedRoutes:\n      kinds:\n      - kind: UDPRoute\n---\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: gateway-preserve-case-backend\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: go-server\n  namespace: gateway-preserve-case-backend\ndata:\n  go.mod: |\n         module srvr\n         go 1.21.3\n         require (\n         \tgithub.com/andybalholm/brotli v1.0.5 // indirect\n         \tgithub.com/klauspost/compress v1.17.0 // indirect\n         \tgithub.com/valyala/bytebufferpool v1.0.0 // indirect\n         \tgithub.com/valyala/fasthttp v1.51.0 // indirect\n         )\n  go.sum: |\n         github.com/andybalholm/brotli v1.0.5 h1:8uQZIdzKmjc/iuPu7O2ioW48L81FgatrcpfFmiq/cCs=\n         github.com/andybalholm/brotli v1.0.5/go.mod h1:fO7iG3H7G2nSZ7m0zPUDn85XEX2GTukHGRSepvi9Eig=\n         github.com/klauspost/compress v1.17.0 h1:Rnbp4K9EjcDuVuHtd0dgA4qNuv9yKDYKK1ulpJwgrqM=\n         github.com/klauspost/compress v1.17.0/go.mod h1:ntbaceVETuRiXiv4DpjP66DpAtAGkEQskQzEyD//IeE=\n         github.com/valyala/bytebufferpool v1.0.0 h1:GqA5TC/0021Y/b9FG4Oi9Mr3q7XYx6KllzawFIhcdPw=\n         github.com/valyala/bytebufferpool v1.0.0/go.mod h1:6bBcMArwyJ5K/AmCkWv1jt77kVWyCJ6HpOuEn7z0Csc=\n         github.com/valyala/fasthttp v1.51.0 h1:8b30A5JlZ6C7AS81RsWjYMQmrZG6feChmgAolCl1SqA=\n         github.com/valyala/fasthttp v1.51.0/go.mod h1:oI2XroL+lI7vdXyYoQk03bXBThfFl2cVdIA3Xl7cH8g=\n  main.go: |\n         package main\n         import (\n         \t\"encoding/json\"\n         \t\"fmt\"\n         \t\"log\"\n         \t\"github.com/valyala/fasthttp\"\n         )\n         func HandleFastHTTP(ctx *fasthttp.RequestCtx) {\n         \tctx.QueryArgs().VisitAll(func(key, value []byte) {\n         \t\tif string(key) == \"headers\" {\n         \t\t\tctx.Response.Header.Add(string(value), \"PrEsEnT\")\n         \t\t}\n         \t})\n         \theaders := map[string][]string{}\n         \tctx.Request.Header.VisitAll(func(key, value []byte) {\n         \t\theaders[string(key)] = append(headers[string(key)], string(value))\n         \t})\n         \tif d, err := json.MarshalIndent(headers, \"\", \"  \"); err != nil {\n         \t\tctx.Error(fmt.Sprintf(\"%s\", err), fasthttp.StatusBadRequest)\n         \t} else {\n         \t\tfmt.Fprintf(ctx, string(d)+\"\\n\")\n         \t}\n         }\n         func main() {\n         \ts := fasthttp.Server{\n         \t\tHandler:                       HandleFastHTTP,\n         \t\tDisableHeaderNamesNormalizing: true,\n         \t}\n            log.Printf(\"Starting on port 8000\")\n         \tlog.Fatal(s.ListenAndServe(\":8000\"))\n         }\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: golang-app-deployment\n  namespace: gateway-preserve-case-backend\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: golang-app\n  template:\n    metadata:\n      labels:\n        app: golang-app\n    spec:\n      containers:\n      - name: golang-app-container\n        command:\n        - sh\n        - \"-c\"\n        - \"cp -a /app /app-live && cd /app-live && go  run . \"\n        image: golang:1.21.3-alpine\n        ports:\n        - containerPort: 8000\n        volumeMounts:\n        - name: go-server\n          mountPath: /app\n      volumes:\n      - name: go-server\n        configMap:\n          name: go-server\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: fasthttp-backend\n  namespace: gateway-preserve-case-backend\nspec:\n  selector:\n    app: golang-app\n  ports:\n  - protocol: TCP\n    port: 8000\n    targetPort: 8000\n"

var ClientTimeoutTest = suite.ConformanceTest{
	ShortName:   "ClientTimeout",
	Description: "Test that the ClientTrafficPolicy API implementation supports client timeout",
	Manifests:   []string{"testdata/client-timeout.yaml"},
	Test: func(t *testing.T, suite *suite.ConformanceTestSuite) {
		t.Run("http client timeout", func(t *testing.T) {
			ns := "gateway-conformance-infra"
			routeNN := types.NamespacedName{Name: "http-client-timeout", Namespace: ns}
			gwNN := types.NamespacedName{Name: "same-namespace", Namespace: ns}
			gwAddr := kubernetes.GatewayAndHTTPRoutesMustBeAccepted(t, suite.Client, suite.TimeoutConfig, suite.ControllerName, kubernetes.NewGatewayRef(gwNN), routeNN)

			expectedResponse := http.ExpectedResponse{
				Request: http.Request{
					Path: "/request-timeout",
					Headers: map[string]string{
						"x-large-header": largeHeader,
					},
				},
				Response: http.Response{
					StatusCode: 408,
				},
				Namespace: ns,
			}

			req := http.MakeRequest(t, &expectedResponse, gwAddr, "HTTP", "http")
			cReq, cResp, err := suite.RoundTripper.CaptureRoundTrip(req)
			if err != nil {
				t.Errorf("failed to get expected response: %v", err)
			}

			if err := http.CompareRequest(t, &req, cReq, cResp, expectedResponse); err != nil {
				t.Errorf("failed to compare request and response: %v", err)
			}
		})
	},
}
