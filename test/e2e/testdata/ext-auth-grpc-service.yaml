---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grpc-ext-auth
  namespace: gateway-conformance-infra
data:
  go.mod: |
         module github.com/envoyproxy/gateway

         go 1.21

         require (
         	github.com/envoyproxy/go-control-plane v0.12.0
         	github.com/golang/protobuf v1.5.4
         	google.golang.org/genproto/googleapis/rpc v0.0.0-20240304212257-790db918fca8
         	google.golang.org/grpc v1.62.1
         )

         require (
         	github.com/cncf/xds/go v0.0.0-20231128003011-0fa0005c9caa // indirect
         	github.com/envoyproxy/protoc-gen-validate v1.0.4 // indirect
         	golang.org/x/net v0.20.0 // indirect
         	golang.org/x/sys v0.16.0 // indirect
         	golang.org/x/text v0.14.0 // indirect
         	google.golang.org/protobuf v1.33.0 // indirect
         )
  go.sum: |
         github.com/cncf/xds/go v0.0.0-20231128003011-0fa0005c9caa h1:jQCWAUqqlij9Pgj2i/PB79y4KOPYVyFYdROxgaCwdTQ=
         github.com/cncf/xds/go v0.0.0-20231128003011-0fa0005c9caa/go.mod h1:x/1Gn8zydmfq8dk6e9PdstVsDgu9RuyIIJqAaF//0IM=
         github.com/envoyproxy/go-control-plane v0.12.0 h1:4X+VP1GHd1Mhj6IB5mMeGbLCleqxjletLK6K0rbxyZI=
         github.com/envoyproxy/go-control-plane v0.12.0/go.mod h1:ZBTaoJ23lqITozF0M6G4/IragXCQKCnYbmlmtHvwRG0=
         github.com/envoyproxy/protoc-gen-validate v1.0.4 h1:gVPz/FMfvh57HdSJQyvBtF00j8JU4zdyUgIUNhlgg0A=
         github.com/envoyproxy/protoc-gen-validate v1.0.4/go.mod h1:qys6tmnRsYrQqIhm2bvKZH4Blx/1gTIZ2UKVY1M+Yew=
         github.com/golang/protobuf v1.5.4 h1:i7eJL8qZTpSEXOPTxNKhASYpMn+8e5Q6AdndVa1dWek=
         github.com/golang/protobuf v1.5.4/go.mod h1:lnTiLA8Wa4RWRcIUkrtSVa5nRhsEGBg48fD6rSs7xps=
         github.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=
         github.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=
         golang.org/x/net v0.20.0 h1:aCL9BSgETF1k+blQaYUBx9hJ9LOGP3gAVemcZlf1Kpo=
         golang.org/x/net v0.20.0/go.mod h1:z8BVo6PvndSri0LbOE3hAn0apkU+1YvI6E70E9jsnvY=
         golang.org/x/sys v0.16.0 h1:xWw16ngr6ZMtmxDyKyIgsE93KNKz5HKmMa3b8ALHidU=
         golang.org/x/sys v0.16.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
         golang.org/x/text v0.14.0 h1:ScX5w1eTa3QqT8oi6+ziP7dTV1S2+ALU0bI+0zXKWiQ=
         golang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=
         google.golang.org/genproto/googleapis/rpc v0.0.0-20240304212257-790db918fca8 h1:IR+hp6ypxjH24bkMfEJ0yHR21+gwPWdV+/IBrPQyn3k=
         google.golang.org/genproto/googleapis/rpc v0.0.0-20240304212257-790db918fca8/go.mod h1:UCOku4NytXMJuLQE5VuqA5lX3PcHCBo8pxNyvkf4xBs=
         google.golang.org/grpc v1.62.1 h1:B4n+nfKzOICUXMgyrNd19h/I9oH0L1pizfk1d4zSgTk=
         google.golang.org/grpc v1.62.1/go.mod h1:IWTG0VlJLCh1SkC58F7np9ka9mx/WNkjl4PGJaiq+QE=
         google.golang.org/protobuf v1.33.0 h1:uNO2rsAINq/JlFpSdYEKIZ0uKD/R9cpdv0T+yoGwGmI=
         google.golang.org/protobuf v1.33.0/go.mod h1:c6P6GXX6sHbq/GpV6MGZEdwhWPcYBgnhAHhKbcUYpos=
  main.go: |
         package main

         import (
         	"context"
         	"crypto/tls"
         	"crypto/x509"
         	"flag"
         	"fmt"
         	"log"
         	"net"
         	"net/http"
         	"os"
         	"strings"

         	envoy_api_v3_core "github.com/envoyproxy/go-control-plane/envoy/config/core/v3"
         	envoy_service_auth_v3 "github.com/envoyproxy/go-control-plane/envoy/service/auth/v3"
         	"github.com/golang/protobuf/ptypes/wrappers"
         	"google.golang.org/genproto/googleapis/rpc/code"
         	"google.golang.org/genproto/googleapis/rpc/status"
         	"google.golang.org/grpc"
         	"google.golang.org/grpc/credentials"
         )

         var (
         	port     int
         	certPath string
         )

         func main() {
         	flag.IntVar(&port, "port", 9002, "gRPC port")
         	flag.StringVar(&certPath, "certPath", "", "path to server certificate and private key")
         	flag.Parse()

         	lis, err := net.Listen("tcp", fmt.Sprintf(":%d", port))
         	if err != nil {
         		log.Fatalf("failed to listen to %d: %v", port, err)
         	}

         	users := TestUsers()

         	// Load TLS credentials
         	creds, err := loadTLSCredentials(certPath)
         	if err != nil {
         		log.Fatalf("Failed to load TLS credentials: %v", err)
         	}
         	gs := grpc.NewServer(grpc.Creds(creds))

         	envoy_service_auth_v3.RegisterAuthorizationServer(gs, NewAuthServer(users))

         	log.Printf("starting gRPC server on: %d\n", port)

         	go func() {
         		err = gs.Serve(lis)
         		if err != nil {
         			log.Fatalf("failed to serve: %v", err)
         		}
         	}()

         	http.HandleFunc("/healthz", healthCheckHandler)
         	err = http.ListenAndServe(":8080", nil)
         	if err != nil {
         		log.Fatalf("failed to serve: %v", err)
         	}
         }

         type authServer struct {
         	users Users
         }

         var _ envoy_service_auth_v3.AuthorizationServer = &authServer{}

         // NewAuthServer creates a new authorization server.
         func NewAuthServer(users Users) envoy_service_auth_v3.AuthorizationServer {
         	return &authServer{users}
         }

         // Check implements authorization's Check interface which performs authorization check based on the
         // attributes associated with the incoming request.
         func (s *authServer) Check(
         	_ context.Context,
         	req *envoy_service_auth_v3.CheckRequest) (*envoy_service_auth_v3.CheckResponse, error) {
         	authorization := req.Attributes.Request.Http.Headers["authorization"]
         	log.Println(authorization)

         	extracted := strings.Fields(authorization)
         	if len(extracted) == 2 && extracted[0] == "Bearer" {
         		valid, user := s.users.Check(extracted[1])
         		if valid {
         			return &envoy_service_auth_v3.CheckResponse{
         				HttpResponse: &envoy_service_auth_v3.CheckResponse_OkResponse{
         					OkResponse: &envoy_service_auth_v3.OkHttpResponse{
         						Headers: []*envoy_api_v3_core.HeaderValueOption{
         							{
         								Append: &wrappers.BoolValue{Value: false},
         								Header: &envoy_api_v3_core.HeaderValue{
         									// For a successful request, the authorization server sets the
         									// x-current-user value.
         									Key:   "x-current-user",
         									Value: user,
         								},
         							},
         						},
         					},
         				},
         				Status: &status.Status{
         					Code: int32(code.Code_OK),
         				},
         			}, nil
         		}
         	}

         	return &envoy_service_auth_v3.CheckResponse{
         		Status: &status.Status{
         			Code: int32(code.Code_PERMISSION_DENIED),
         		},
         	}, nil
         }

         // Users holds a list of users.
         type Users map[string]string

         // Check checks if a key could retrieve a user from a list of users.
         func (u Users) Check(key string) (bool, string) {
         	value, ok := u[key]
         	if !ok {
         		return false, ""
         	}
         	return ok, value
         }

         func TestUsers() Users {
         	return map[string]string{
         		"token1": "user1",
         		"token2": "user2",
         		"token3": "user3",
         	}
         }

         func healthCheckHandler(w http.ResponseWriter, r *http.Request) {
         	certPool, err := loadCA(certPath)
         	if err != nil {
         		log.Fatalf("Could not load CA certificate: %v", err)
         	}

         	// Create TLS configuration
         	tlsConfig := &tls.Config{
         		RootCAs: certPool,
         	}

         	// Create gRPC dial options
         	opts := []grpc.DialOption{
         		grpc.WithTransportCredentials(credentials.NewTLS(tlsConfig)),
         	}

         	conn, err := grpc.Dial("localhost:9002", opts...)
         	if err != nil {
         		log.Fatalf("Could not connect: %v", err)
         	}
         	client := envoy_service_auth_v3.NewAuthorizationClient(conn)

         	response, err := client.Check(context.Background(), &envoy_service_auth_v3.CheckRequest{
         		Attributes: &envoy_service_auth_v3.AttributeContext{
         			Request: &envoy_service_auth_v3.AttributeContext_Request{
         				Http: &envoy_service_auth_v3.AttributeContext_HttpRequest{
         					Headers: map[string]string{
         						"authorization": "Bearer token1",
         					},
         				},
         			},
         		},
         	})
         	if err != nil {
         		log.Fatalf("Could not check: %v", err)
         	}
         	if response != nil && response.Status.Code == int32(code.Code_OK) {
         		w.WriteHeader(http.StatusOK)
         	} else {
         		w.WriteHeader(http.StatusServiceUnavailable)
         	}
         }

         func loadTLSCredentials(certPath string) (credentials.TransportCredentials, error) {
         	// Load server's certificate and private key
         	crt := "server.crt"
         	key := "server.key"

         	if certPath != "" {
         		if !strings.HasSuffix(certPath, "/") {
         			certPath = fmt.Sprintf("%s/", certPath)
         		}
         		crt = fmt.Sprintf("%s%s", certPath, crt)
         		key = fmt.Sprintf("%s%s", certPath, key)
         	}
         	certificate, err := tls.LoadX509KeyPair(crt, key)
         	if err != nil {
         		return nil, fmt.Errorf("could not load server key pair: %s", err)
         	}

         	// Create a new credentials object
         	creds := credentials.NewTLS(&tls.Config{Certificates: []tls.Certificate{certificate}})

         	return creds, nil
         }

         func loadCA(caPath string) (*x509.CertPool, error) {
         	ca := x509.NewCertPool()
         	caCertPath := "server.crt"
         	if caPath != "" {
         		if !strings.HasSuffix(caPath, "/") {
         			caPath = fmt.Sprintf("%s/", caPath)
         		}
         		caCertPath = fmt.Sprintf("%s%s", caPath, caCertPath)
         	}
         	caCert, err := os.ReadFile(caCertPath)
         	if err != nil {
         		return nil, fmt.Errorf("could not read ca certificate: %s", err)
         	}
         	ca.AppendCertsFromPEM(caCert)
         	return ca, nil
         }
---
apiVersion: v1
kind: Secret
metadata:
  name: grpc-ext-auth-secret
  namespace: gateway-conformance-infra
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZxekNDQTVPZ0F3SUJBZ0lVVnV6VUJrakZOeGxOdlorTVB5UjFBQzdUcWI4d0RRWUpLb1pJaHZjTkFRRUwKQlFBd0dERVdNQlFHQTFVRUF3d05aM0p3WXkxbGVIUXRZWFYwYURBZUZ3MHlOREF6TURrd016VXpNVGRhRncwegpOREF6TURjd016VXpNVGRhTUJneEZqQVVCZ05WQkFNTURXZHljR010WlhoMExXRjFkR2d3Z2dJaU1BMEdDU3FHClNJYjNEUUVCQVFVQUE0SUNEd0F3Z2dJS0FvSUNBUUNabmplR2xaYkRWZW50MHZFdkZRWllMUjhYL0ZlTU45TzgKenhGSVp1OXdHQkVIazNTd24vWnhvOG1hTk5CMUw3UjEvTnMydVQwdUdXdS9YSHVVeVJyOG5zeDNGS21uTkxINwp0WFNsbGxFV1NXM05UTnQ2T2lNVXFReWdCcE5seUhETDRXRHpNWG53S200bFFhRFlqcGdzUVZPM3pJWERWRVUyCjRGRllONVJSZGkyOVBLMlRTTWxWYWt0RExic2ltWFM0WXIwQlBkbTZHRTczajFzU2d6WHd5RnZ6a24rQWNIVFYKdTBkN2diT1MwUjBjRTFUK0JSSVExVENCMWJvRndDNW5BNjNySUMrb0lzZUFJS2s4OHYyT3prV0dQeDM5KzlFTQowVEVqbUZCdG9ZcXRzbXhGVlB6YkdhbytieGZKR0g3cG5FSWN0V1h1WHhheEVkb25tMFpVSWJqQlpsUTlVaHJHCnFQWnA3ZHB4YytsR2FmTlRWcngwb1hsNExLelZUTnVKZnFJdXZwVlRTd3hOWTJoZE8weHdqbDBWYlovb2pzNVoKVXVLU3AxNktNaitpN2drMmN5ckxuQlRER2FpWnEyVXUwZ21QVjczTUtjOExFcW9JN2c4Ymk2b3BBYjkzaGxpbApzSkNtWWtneTZCdytIM3J0THpZeCtFcENRZjVyWno2Q3hBZCtML1pIQURGY0d1VFNSRE9DNnd1RGZpNFFDSWJPCjdyNmdzbytzem5xbVJDZDhCMXZSVC9ORjZUOElhU1k2aGJwZkZCKzdrWDFyQysrVjdOZlZ4ODFXS2pUUHNJU2kKODBrb2JWdkM4cWp2di82bENESHZMNWZiWmI2YnUwSG9FN3kzK1lrYU9YaEtOcHdHaWZQT2tobTM4TzhHd280MQp3TTZtVW5HdHZ3SURBUUFCbzRIc01JSHBNQjBHQTFVZERnUVdCQlFGd2E2bkkyZk5iRmkvZ0Jwb0dXemFpR2JhCnp6QWZCZ05WSFNNRUdEQVdnQlFGd2E2bkkyZk5iRmkvZ0Jwb0dXemFpR2JhenpBSkJnTlZIUk1FQWpBQU1Bc0cKQTFVZER3UUVBd0lGNERBVEJnTlZIU1VFRERBS0JnZ3JCZ0VGQlFjREFUQk1CZ05WSFJFRVJUQkRnZzFuY25CagpMV1Y0ZEMxaGRYUm9naWRuY25CakxXVjRkQzFoZFhSb0xtZGhkR1YzWVhrdFkyOXVabTl5YldGdVkyVXRhVzVtCmNtR0NDV3h2WTJGc2FHOXpkREFzQmdsZ2hrZ0JodmhDQVEwRUh4WWRUM0JsYmxOVFRDQkhaVzVsY21GMFpXUWcKUTJWeWRHbG1hV05oZEdVd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dJQkFKSXpTb0M5UFEvUjhmMDJwKzREV3ZUegpXNzh2S0pJeGlMa283b25SMXF0MEgyT0x2NUtjNGF0blQvanh0N1ZaV3k0VUprZmowYlZxVHVXVTRXeWFobWxICmIxUUt3V2lYM2Jqditzd2JvOC93WkoyMnNIdzBib3FuMEdWcmdyUVgwaEViaDZUNDdlWUNjQnR2Z1ZWbUNLbnIKaXNzbVUwSGhwb3g2cm9UM3dhbjhsOWRGRDR4bzlpaHE0ckh1b3JCbElNQ2d2RWhkSVVIVDB3eVgyejRLWFJTWgpiZ0U4ZXpVZ295dWVPamdvRTZhZ0xidEs4S1VVUVdmTExxZ0ZRT3M4ckE3SGZ2blF4Qjd3aUpkdXZJZGV5ZitpCnRuN2ZRVkNxcFd6c0h1R2Z2WTNpdmpuQWNRYjlUb3ErUTRJKy9YdHExN0doMzlnbzYrMW5tL1Yvb0pQRWFnRWcKWEwrT3pjT0Y2Y09NRDdaeW92M1BXVmJKbVJGc3F2aTIvaWpmOHZ0Z201ZkdVRlJJY0pLWmFrN2Y0QzlENUNpagorM3l5aThQaG9RSHlxQzZxK0dNRWF4czJGQ1hXQW1vMXhXVTY3cENDWU9NZ2VnS2NtWGFoR2hWRHB3VHV1RHNICmUxUXdUTGZNQUNrczB2UVd0OWxMMHUxN090cXpROTR6TnRMRTlkU3VMYVp2U1hxaTBQaklWcXVNdXFVQnU5djgKMDFaMVRWQmZGd1VOTzB0Z1VBaU1STWNWbGZqS2ozZkUweE5aZUIvbVhodmFpeTVoWmE2dlVxSXJFYzl5eHJJdwp1Q28zQWNnZmY5YUYrM0FVQlg0b1dpYURtUDBaTDVWMHJEMGRWU1dlQW1qYWdXVXRUc1ZGelk4Y2J5T0c2aFd4CmlGSTFVZkxRL0N1T3ROc0RUYmkwCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUpRd0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1Mwd2dna3BBZ0VBQW9JQ0FRQ1puamVHbFpiRFZlbnQKMHZFdkZRWllMUjhYL0ZlTU45Tzh6eEZJWnU5d0dCRUhrM1N3bi9aeG84bWFOTkIxTDdSMS9OczJ1VDB1R1d1LwpYSHVVeVJyOG5zeDNGS21uTkxIN3RYU2xsbEVXU1czTlROdDZPaU1VcVF5Z0JwTmx5SERMNFdEek1YbndLbTRsClFhRFlqcGdzUVZPM3pJWERWRVUyNEZGWU41UlJkaTI5UEsyVFNNbFZha3RETGJzaW1YUzRZcjBCUGRtNkdFNzMKajFzU2d6WHd5RnZ6a24rQWNIVFZ1MGQ3Z2JPUzBSMGNFMVQrQlJJUTFUQ0IxYm9Gd0M1bkE2M3JJQytvSXNlQQpJS2s4OHYyT3prV0dQeDM5KzlFTTBURWptRkJ0b1lxdHNteEZWUHpiR2FvK2J4ZkpHSDdwbkVJY3RXWHVYeGF4CkVkb25tMFpVSWJqQlpsUTlVaHJHcVBacDdkcHhjK2xHYWZOVFZyeDBvWGw0TEt6VlROdUpmcUl1dnBWVFN3eE4KWTJoZE8weHdqbDBWYlovb2pzNVpVdUtTcDE2S01qK2k3Z2syY3lyTG5CVERHYWlacTJVdTBnbVBWNzNNS2M4TApFcW9JN2c4Ymk2b3BBYjkzaGxpbHNKQ21Za2d5NkJ3K0gzcnRMell4K0VwQ1FmNXJaejZDeEFkK0wvWkhBREZjCkd1VFNSRE9DNnd1RGZpNFFDSWJPN3I2Z3NvK3N6bnFtUkNkOEIxdlJUL05GNlQ4SWFTWTZoYnBmRkIrN2tYMXIKQysrVjdOZlZ4ODFXS2pUUHNJU2k4MGtvYlZ2QzhxanZ2LzZsQ0RIdkw1ZmJaYjZidTBIb0U3eTMrWWthT1hoSwpOcHdHaWZQT2tobTM4TzhHd280MXdNNm1Vbkd0dndJREFRQUJBb0lDQUJ4bml2RFJ2QnpHU0FqM2xpMFVnQ1hSCndnd1hWc0RRbWRBeG9ZcDNyaEpXQU9BYnZkbmkyaGpOSmp2alJDQkcvK0ZKTGVlQ2ZQT0hNOHNnZUtGY1JpY3IKM2JhdkZXZWJjTVdRR2M5OGFlWHJFZWlDSzVzQUlQaHpBYWlkVHFmbFZpWDh1SVovUVlMTTlhemg0N0huTy9BQwo3RTN4L1ZIT3hUV09hTHdkR3NtdFJtdlZTbXNQYkZyazJxSERWUFRpMXhnNCthVy9JQUV1K1hzQkFOLzlidjNrCnJrdnRiTEg5R1QxajhhVytwOHVmNnZnRUF4VXRMdGY1ODR3dVRzVTljZGNPY1J3bXlXa1hkVGdWMGZVNUlQVkUKNHNvZDVaZk85aXFlaTYxL1BtL25ETk50U0dQUmdTZXFLVForS0RIQTI4YXFZL2NXKzVBRitSWW9yT1BoN0REYwo3REIxQjQ2SVNyZDVZRzZadjQxaVA4Ui85WWpwYXFwMk13bXhsNWlWUVBWd0psbGZPV3p3VHEwa3BNS1lpWDlBCmE4ZWpMc3RXdEM3c0lCVHdKeldWK3RVNnVIckhyZ0hEdlJYaFZHRHN0eXVIUUhxczA0ZXVrZmlhVHJVdlR1WVgKbUp3SFprVVNTb1U0WGFMTURGYWFwN0tyaEZaTEZsTzJZdVhna25oNTFlc0x2RVB3ekVPUFNWMmJGc0hZS0pxbwo5Q1IyeDdBNzZPcXU5cGhSTVRacXVwMCt6R0hsU2VHNlo0clZKKzNYWExLS1pubjV4UXJjWlY4Y0d3SXo2dnZPCnJvU0tIaC9tV0VvQll0UEJEMkhYT010THUwMHdZUlF6ckdOa3VOcmtlQlQxZkNndG1za3VxOGNEZHo0bWs1c3AKYkR2UFhKNW5URWlsOEo2VXFhNGhBb0lCQVFESVZXWkhlOVhnUk9ZU2tEUmNGNFEwYUZrRkxGN2ZMOVY5V0hyeQpmVGVvdnFuMjVFQlVaTCtKMmhDbURMOVZ5MUR6YWhSd083TVZRYjRHT09iejhncFVqckxzb2RycGFydjlQNFhiClV6VTRvTTM5ZjU1OFhkTGtBRHk0VUxtTTZVNHBJait3YzdhSFhMMmRHNE5zNkplN0lLclh1c3pnQTl1S3c4UFcKRXYweVlZN2lIOXUydlM2MXZxQlBzQkRNbUltL2I0ekx2UEFwTnR5MkIrNWh3anFoTjRWSEpEUFVQRVVQWXJ6cwpmZEkwL2krWTZtaURweHptSXk1VWh4TkJvVitBblZ5L3BiU0tOc1Q3bHdPekQ2REJaREQ3MEFsenRUNlo5OXh3CkFseWhBU2t2ZmxneFd2TWJ3MEVKN25HUWNhTTR6YW5HNE00SGRCZXZJSnozMmpFSEFvSUJBUURFVGJ5R3AvNVQKcnhoNzNoT05xT3NZOGpxdFI0eVg3REpJcFB2eVNocUVoTUVXQVpYb1ZjRTQvSXd2c1JDVXdxald3VkN5ampJUQpKSUh4TmNEU1Rtd1JPcEQ5OGY2S01zamx0bWRtd3pLblBiZnhleEhwZTRMQmh0UFc5bE9GRHpYblpXWnNWSk1PCm9DV3pwL0N2cldCM3dzM1FsTElzTXhUTDhhTW1KOVBiUFcrUEcyWXphM05rMWV1bm4zWm81SGtkeHJFaDBCVngKMjMxRjA2ZGdoNmZBcDZVZXg0WXdiSUlRU1hGRkI4cmJ3V3Frb0RZYTNWVlZTQ29Dbk9VNHBRb0pudHVkb0cyOQpwTnJaQzlHVWFwUGdycDJoV3Iya0tCY3lYVTBQRksrM1hWSE80aHJLY1FVU3M1c2dTd1NiS3F3eGQ0eEs2djB6CllHeXhuYmR4cDhlSkFvSUJBUURETnFTaUI4UVQ5RStWeXp1YWViZjBNYko5WGcxY3d3bndTT1lWb1hzNVRnSGwKZWVwTjBwYnF4N250ZFFLRm9jZlNTbzU4QjFDczZCRTVrdjFLdlpMZmJ1WmZ2Q0RMejV3OFhVZ2N2dXBmc2lMSQpZVEdZMHZ5TC9NY3VmRXN6U3ExRlhBQmYrNEhrU2JUamdVb0NPR3lTaG5TMEgyMUE1Y0ZyYVBST2lOWjkzNThTCkxpVTEzd2ZEUm15RStuYUVTQ2dDaWJyVFZkdFk3Z01JeHBXK1lUd3NtU09nZldDYjhkY0I5UjlQL0JONFhERVoKZTJJNDJBRkxLUUVla1Rsc2ZNbkpWSTVxbWhoaGpwbEk2SkZNVFhCQ3cxVVFMRnJwaTdYaTV5ckJZeXZNSUl0MwpvbEJpVjlRS082d0c5M2xtWGJYRnhuTW9QeXZGQzVXQXEvRUpmRzdGQW9JQkFRQ1d2R3FMcSt3ckxrVEt1TmlpCjZwYThiU1NKY211UExSdmZsSEN5dUJ4c3JkUG1wZ2tLZ3U4QVowenVRalROUmp5SHk2Ry91bGpPOUhtalV2ZGgKaGo2TmJEOXlBS1RJVWY3YUJacVkya0xIRVNseUVHTE11cjdKQkZNZXViK2dhUEduWWNHb1pia1dmZnIxWFh3QQpLazN0S0hVS09XUW5kSUgvcU9qeW41cWF1eTR5NFlNMDhNbUhJSXo0QmdiU3ZMNFVFMEpwQ0hPdkhpK3ZzcnJQCjhOcnJvTSsyTnRmZnp6S0FkeVMzTVNpZ1hvRVpNTHpiSENJdWZsOWo2ajVKcE5GMFdidWg2bExhVVFDTHNmdVkKejg0RnRZL3RHdFNNZlF4eTdCb0Qvb3AvYnZVbXU1Qis2eEpPTGdSc1k2NkJ4OTY1aldiNUVFQ2xkdUYvOGUrdgpJbnFoQW9JQkFFS2tza29mRE5lKzZTeWpsTFBzUVVBbkljdVdBOWttMlQ1OFRrSGF3emlJWmFMVjN4eFpCcUhXCjJQek9OUE40dlZzNzNNLzJJb1JjSmZYdmZlVnF1Rkk4QVdDbzh5b0Z2cFVFYnJKOHVwV2ZGVExVTjZ6UFRMdkgKSTBDVU5Gb1A0TWI1ZGNWUXBwT3pWY3d3UWUvM2FuN3hrZHBpdkFMTWZwYU5YaHg5dG5rc3JQVXJiQjBuNzVZbQo1WGxvVTZPNTY3cmN4c0g4b2VLaUpGZUdxMnJRQ1d5K2NJREk0T3cvNlJmcWd2TEdjb2JleDMwY1ZLT29iRWVVCmNnWnZNM2VvczZ5TCtRdGY2bUhldnN0VkRkaldsaUpoUGlBUkVTeVZwdy9XVE1aU1pORnpjZ1R6M2p3TklHMUwKQndaaVNnMTkxMzdlTlFjalIxdUxHYnVWSWtXVGN0bz0KLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQo=
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grpc-ext-auth-ca
  namespace: gateway-conformance-infra
data:
  ca.crt: |
        -----BEGIN CERTIFICATE-----
        MIIFqzCCA5OgAwIBAgIUVuzUBkjFNxlNvZ+MPyR1AC7Tqb8wDQYJKoZIhvcNAQEL
        BQAwGDEWMBQGA1UEAwwNZ3JwYy1leHQtYXV0aDAeFw0yNDAzMDkwMzUzMTdaFw0z
        NDAzMDcwMzUzMTdaMBgxFjAUBgNVBAMMDWdycGMtZXh0LWF1dGgwggIiMA0GCSqG
        SIb3DQEBAQUAA4ICDwAwggIKAoICAQCZnjeGlZbDVent0vEvFQZYLR8X/FeMN9O8
        zxFIZu9wGBEHk3Swn/Zxo8maNNB1L7R1/Ns2uT0uGWu/XHuUyRr8nsx3FKmnNLH7
        tXSlllEWSW3NTNt6OiMUqQygBpNlyHDL4WDzMXnwKm4lQaDYjpgsQVO3zIXDVEU2
        4FFYN5RRdi29PK2TSMlVaktDLbsimXS4Yr0BPdm6GE73j1sSgzXwyFvzkn+AcHTV
        u0d7gbOS0R0cE1T+BRIQ1TCB1boFwC5nA63rIC+oIseAIKk88v2OzkWGPx39+9EM
        0TEjmFBtoYqtsmxFVPzbGao+bxfJGH7pnEIctWXuXxaxEdonm0ZUIbjBZlQ9UhrG
        qPZp7dpxc+lGafNTVrx0oXl4LKzVTNuJfqIuvpVTSwxNY2hdO0xwjl0VbZ/ojs5Z
        UuKSp16KMj+i7gk2cyrLnBTDGaiZq2Uu0gmPV73MKc8LEqoI7g8bi6opAb93hlil
        sJCmYkgy6Bw+H3rtLzYx+EpCQf5rZz6CxAd+L/ZHADFcGuTSRDOC6wuDfi4QCIbO
        7r6gso+sznqmRCd8B1vRT/NF6T8IaSY6hbpfFB+7kX1rC++V7NfVx81WKjTPsISi
        80kobVvC8qjvv/6lCDHvL5fbZb6bu0HoE7y3+YkaOXhKNpwGifPOkhm38O8Gwo41
        wM6mUnGtvwIDAQABo4HsMIHpMB0GA1UdDgQWBBQFwa6nI2fNbFi/gBpoGWzaiGba
        zzAfBgNVHSMEGDAWgBQFwa6nI2fNbFi/gBpoGWzaiGbazzAJBgNVHRMEAjAAMAsG
        A1UdDwQEAwIF4DATBgNVHSUEDDAKBggrBgEFBQcDATBMBgNVHREERTBDgg1ncnBj
        LWV4dC1hdXRogidncnBjLWV4dC1hdXRoLmdhdGV3YXktY29uZm9ybWFuY2UtaW5m
        cmGCCWxvY2FsaG9zdDAsBglghkgBhvhCAQ0EHxYdT3BlblNTTCBHZW5lcmF0ZWQg
        Q2VydGlmaWNhdGUwDQYJKoZIhvcNAQELBQADggIBAJIzSoC9PQ/R8f02p+4DWvTz
        W78vKJIxiLko7onR1qt0H2OLv5Kc4atnT/jxt7VZWy4UJkfj0bVqTuWU4WyahmlH
        b1QKwWiX3bjv+swbo8/wZJ22sHw0boqn0GVrgrQX0hEbh6T47eYCcBtvgVVmCKnr
        issmU0Hhpox6roT3wan8l9dFD4xo9ihq4rHuorBlIMCgvEhdIUHT0wyX2z4KXRSZ
        bgE8ezUgoyueOjgoE6agLbtK8KUUQWfLLqgFQOs8rA7HfvnQxB7wiJduvIdeyf+i
        tn7fQVCqpWzsHuGfvY3ivjnAcQb9Toq+Q4I+/Xtq17Gh39go6+1nm/V/oJPEagEg
        XL+OzcOF6cOMD7Zyov3PWVbJmRFsqvi2/ijf8vtgm5fGUFRIcJKZak7f4C9D5Cij
        +3yyi8PhoQHyqC6q+GMEaxs2FCXWAmo1xWU67pCCYOMgegKcmXahGhVDpwTuuDsH
        e1QwTLfMACks0vQWt9lL0u17OtqzQ94zNtLE9dSuLaZvSXqi0PjIVquMuqUBu9v8
        01Z1TVBfFwUNO0tgUAiMRMcVlfjKj3fE0xNZeB/mXhvaiy5hZa6vUqIrEc9yxrIw
        uCo3Acgff9aF+3AUBX4oWiaDmP0ZL5V0rD0dVSWeAmjagWUtTsVFzY8cbyOG6hWx
        iFI1UfLQ/CuOtNsDTbi0
        -----END CERTIFICATE-----
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grpc-ext-auth
  namespace: gateway-conformance-infra
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grpc-ext-auth
  template:
    metadata:
      labels:
        app: grpc-ext-auth
    spec:
      containers:
      - name: golang-app-container
        command:
        - sh
        - "-c"
        - "cp -a /app /app-live && cd /app-live && go  run . --certPath=/app-live/certs/ "
        image: golang:1.21.3-alpine
        ports:
        - containerPort: 8000
        volumeMounts:
        - name: grpc-ext-auth
          mountPath: /app
        - name: grpc-ext-auth-secret
          mountPath: /app/certs
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
      volumes:
      - name: grpc-ext-auth
        configMap:
          name: grpc-ext-auth
      - name: grpc-ext-auth-secret
        secret:
          secretName: grpc-ext-auth-secret
          items:
          - key: tls.crt
            path: server.crt
          - key: tls.key
            path: server.key
---
apiVersion: v1
kind: Service
metadata:
  name: grpc-ext-auth
  namespace: gateway-conformance-infra
spec:
  selector:
    app: grpc-ext-auth
  ports:
  - protocol: TCP
    port: 9002
    targetPort: 9002
