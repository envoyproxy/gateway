// Copyright Envoy Gateway Authors
// SPDX-License-Identifier: Apache-2.0
// The full text of the Apache license is available in the LICENSE file at
// the root of the repo.

// Code generated by informer-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	time "time"

	gatewayapiv1alpha1 "github.com/envoyproxy/gateway/api/v1alpha1"
	versioned "github.com/envoyproxy/gateway/pkg/client/clientset/versioned"
	internalinterfaces "github.com/envoyproxy/gateway/pkg/client/informers/externalversions/internalinterfaces"
	apiv1alpha1 "github.com/envoyproxy/gateway/pkg/client/listers/api/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// BackendTrafficPolicyInformer provides access to a shared informer and lister for
// BackendTrafficPolicies.
type BackendTrafficPolicyInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() apiv1alpha1.BackendTrafficPolicyLister
}

type backendTrafficPolicyInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewBackendTrafficPolicyInformer constructs a new informer for BackendTrafficPolicy type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewBackendTrafficPolicyInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredBackendTrafficPolicyInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredBackendTrafficPolicyInformer constructs a new informer for BackendTrafficPolicy type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredBackendTrafficPolicyInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.GatewayV1alpha1().BackendTrafficPolicies(namespace).List(context.Background(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.GatewayV1alpha1().BackendTrafficPolicies(namespace).Watch(context.Background(), options)
			},
			ListWithContextFunc: func(ctx context.Context, options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.GatewayV1alpha1().BackendTrafficPolicies(namespace).List(ctx, options)
			},
			WatchFuncWithContext: func(ctx context.Context, options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.GatewayV1alpha1().BackendTrafficPolicies(namespace).Watch(ctx, options)
			},
		},
		&gatewayapiv1alpha1.BackendTrafficPolicy{},
		resyncPeriod,
		indexers,
	)
}

func (f *backendTrafficPolicyInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredBackendTrafficPolicyInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *backendTrafficPolicyInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&gatewayapiv1alpha1.BackendTrafficPolicy{}, f.defaultInformer)
}

func (f *backendTrafficPolicyInformer) Lister() apiv1alpha1.BackendTrafficPolicyLister {
	return apiv1alpha1.NewBackendTrafficPolicyLister(f.Informer().GetIndexer())
}
