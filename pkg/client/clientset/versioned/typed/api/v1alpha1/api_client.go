// Copyright Envoy Gateway Authors
// SPDX-License-Identifier: Apache-2.0
// The full text of the Apache license is available in the LICENSE file at
// the root of the repo.

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	http "net/http"

	apiv1alpha1 "github.com/envoyproxy/gateway/api/v1alpha1"
	scheme "github.com/envoyproxy/gateway/pkg/client/clientset/versioned/scheme"
	rest "k8s.io/client-go/rest"
)

type GatewayV1alpha1Interface interface {
	RESTClient() rest.Interface
	BackendsGetter
	BackendTrafficPoliciesGetter
	ClientTrafficPoliciesGetter
	EnvoyExtensionPoliciesGetter
	EnvoyPatchPoliciesGetter
	EnvoyProxiesGetter
	HTTPRouteFiltersGetter
	SecurityPoliciesGetter
}

// GatewayV1alpha1Client is used to interact with features provided by the gateway.envoyproxy.io group.
type GatewayV1alpha1Client struct {
	restClient rest.Interface
}

func (c *GatewayV1alpha1Client) Backends(namespace string) BackendInterface {
	return newBackends(c, namespace)
}

func (c *GatewayV1alpha1Client) BackendTrafficPolicies(namespace string) BackendTrafficPolicyInterface {
	return newBackendTrafficPolicies(c, namespace)
}

func (c *GatewayV1alpha1Client) ClientTrafficPolicies(namespace string) ClientTrafficPolicyInterface {
	return newClientTrafficPolicies(c, namespace)
}

func (c *GatewayV1alpha1Client) EnvoyExtensionPolicies(namespace string) EnvoyExtensionPolicyInterface {
	return newEnvoyExtensionPolicies(c, namespace)
}

func (c *GatewayV1alpha1Client) EnvoyPatchPolicies(namespace string) EnvoyPatchPolicyInterface {
	return newEnvoyPatchPolicies(c, namespace)
}

func (c *GatewayV1alpha1Client) EnvoyProxies(namespace string) EnvoyProxyInterface {
	return newEnvoyProxies(c, namespace)
}

func (c *GatewayV1alpha1Client) HTTPRouteFilters(namespace string) HTTPRouteFilterInterface {
	return newHTTPRouteFilters(c, namespace)
}

func (c *GatewayV1alpha1Client) SecurityPolicies(namespace string) SecurityPolicyInterface {
	return newSecurityPolicies(c, namespace)
}

// NewForConfig creates a new GatewayV1alpha1Client for the given config.
// NewForConfig is equivalent to NewForConfigAndClient(c, httpClient),
// where httpClient was generated with rest.HTTPClientFor(c).
func NewForConfig(c *rest.Config) (*GatewayV1alpha1Client, error) {
	config := *c
	setConfigDefaults(&config)
	httpClient, err := rest.HTTPClientFor(&config)
	if err != nil {
		return nil, err
	}
	return NewForConfigAndClient(&config, httpClient)
}

// NewForConfigAndClient creates a new GatewayV1alpha1Client for the given config and http client.
// Note the http client provided takes precedence over the configured transport values.
func NewForConfigAndClient(c *rest.Config, h *http.Client) (*GatewayV1alpha1Client, error) {
	config := *c
	setConfigDefaults(&config)
	client, err := rest.RESTClientForConfigAndClient(&config, h)
	if err != nil {
		return nil, err
	}
	return &GatewayV1alpha1Client{client}, nil
}

// NewForConfigOrDie creates a new GatewayV1alpha1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *GatewayV1alpha1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new GatewayV1alpha1Client for the given RESTClient.
func New(c rest.Interface) *GatewayV1alpha1Client {
	return &GatewayV1alpha1Client{c}
}

func setConfigDefaults(config *rest.Config) {
	gv := apiv1alpha1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = rest.CodecFactoryForGeneratedClient(scheme.Scheme, scheme.Codecs).WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *GatewayV1alpha1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
