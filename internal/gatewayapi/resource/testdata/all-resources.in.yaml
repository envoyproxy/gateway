apiVersion: gateway.envoyproxy.io/v1alpha1
kind: EnvoyProxy
metadata:
  name: example
  namespace: default
spec:
  provider:
    type: Kubernetes
    kubernetes:
      envoyService:
        annotations:
          custom1: svc-annotation1
---
apiVersion: gateway.networking.k8s.io/v1
kind: GatewayClass
metadata:
  name: eg
spec:
  controllerName: gateway.envoyproxy.io/gatewayclass-controller
---
apiVersion: gateway.networking.k8s.io/v1
kind: Gateway
metadata:
  name: eg
spec:
  gatewayClassName: eg
  listeners:
    - name: http
      protocol: HTTP
      port: 80
---
apiVersion: gateway.networking.k8s.io/v1alpha2
kind: TCPRoute
metadata:
  name: backend
  namespace: default
spec:
  parentRefs:
    - name: eg
      sectionName: tcp
  rules:
    - backendRefs:
        - name: backend
          port: 3000
---
apiVersion: gateway.networking.k8s.io/v1alpha2
kind: UDPRoute
metadata:
  name: backend
  namespace: default
spec:
  parentRefs:
    - name: eg
      sectionName: udp
  rules:
    - backendRefs:
        - name: backend
          port: 3000
---
apiVersion: gateway.networking.k8s.io/v1alpha2
kind: TLSRoute
metadata:
  name: backend
  namespace: default
spec:
  parentRefs:
    - name: eg
      sectionName: tls-passthrough
  rules:
    - backendRefs:
        - name: backend
          port: 3000
---
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: backend
  namespace: default
spec:
  parentRefs:
    - name: eg
  hostnames:
    - "www.example.com"
  rules:
    - backendRefs:
        - name: providedBackend
          port: 8000
---
apiVersion: gateway.networking.k8s.io/v1
kind: GRPCRoute
metadata:
  name: backend
  namespace: default
spec:
  parentRefs:
    - name: eg
      sectionName: grpc
  hostnames:
    - "www.grpc-example.com"
  rules:
    - matches:
        - method:
            service: com.example.Things
            method: DoThing
          headers:
            - name: com.example.Header
              value: foobar
      backendRefs:
        - name: providedBackend
          port: 9000
---
apiVersion: gateway.envoyproxy.io/v1alpha1
kind: EnvoyPatchPolicy
metadata:
  name: ratelimit-patch-policy
  namespace: default
spec:
  targetRef:
    group: gateway.networking.k8s.io
    kind: Gateway
    name: eg
  type: JSONPatch
  jsonPatches:
    - type: "type.googleapis.com/envoy.config.listener.v3.Listener"
      # The listener name is of the form <GatewayNamespace>/<GatewayName>/<GatewayListenerName>
      name: default/eg/http
      operation:
        op: add
        path: "/default_filter_chain/filters/0/typed_config/http_filters/0"
        value:
          name: "envoy.filters.http.ratelimit"
          typed_config:
            "@type": "type.googleapis.com/envoy.extensions.filters.http.ratelimit.v3.RateLimit"
            domain: "eag-ratelimit"
            failure_mode_deny: true
            timeout: 1s
            rate_limit_service:
              grpc_service:
                envoy_grpc:
                  cluster_name: rate-limit-cluster
              transport_api_version: V3
---
apiVersion: gateway.envoyproxy.io/v1alpha1
kind: SecurityPolicy
metadata:
  name: jwt-example
spec:
  targetRef:
    group: gateway.networking.k8s.io
    kind: HTTPRoute
    name: backend
  apiKeyAuth:
    credentialRefs:
      - name: foobar
    extractFrom:
      - headers:
          - foobar
  jwt:
    providers:
      - name: example
        remoteJWKS:
          uri: https://raw.githubusercontent.com/envoyproxy/gateway/main/examples/kubernetes/jwt/jwks.json
---
apiVersion: gateway.envoyproxy.io/v1alpha1
kind: BackendTrafficPolicy
metadata:
  name: cookie-lb-policy
  namespace: gateway-conformance-infra
spec:
  targetRefs:
    - group: gateway.networking.k8s.io
      kind: HTTPRoute
      name: cookie-lb-route
  loadBalancer:
    type: ConsistentHash
    consistentHash:
      type: Cookie
      cookie:
        name: "Lb-Test-Cookie"
        ttl: 60s
        attributes:
          SameSite: Strict
  retry:
    retryOn:
      httpStatusCodes:
        - 200
        - 404
  healthCheck:
    active:
      type: HTTP
      http:
        path: "/"
        method: GET
  circuitBreaker:
    maxRequestsPerConnection: 123
---
apiVersion: gateway.envoyproxy.io/v1alpha1
kind: ClientTrafficPolicy
metadata:
  name: client-timeout
  namespace: gateway-conformance-infra
spec:
  targetRefs:
    - group: gateway.networking.k8s.io
      kind: Gateway
      name: same-namespace
  timeout:
    http:
      requestReceivedTimeout: 50ms
---
apiVersion: gateway.envoyproxy.io/v1alpha1
kind: HTTPRouteFilter
metadata:
  name: direct-response-inline
  namespace: default
spec:
  directResponse:
    contentType: text/plain
    body:
      type: Inline
      inline: "OK"
---
apiVersion: gateway.envoyproxy.io/v1alpha1
kind: Backend
metadata:
  name: backend
spec:
  endpoints:
    - ip:
        address: 0.0.0.0
        port: 4321
---
apiVersion: v1
kind: Secret
metadata:
  name: secret-with-data-and-string-data
  namespace: default
data:
  .secret-file: dmFsdWUtMg0KDQo=
stringData:
  secret: "literal value"
---
apiVersion: v1
kind: Secret
metadata:
  name: secret-with-data
  namespace: default
data:
  .secret-file: dmFsdWUtMg0KDQo=
---
apiVersion: v1
kind: Secret
metadata:
  name: secret-with-string-data
  namespace: default
stringData:
  secret: "literal value"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: configmap
  namespace: default
data:
  player_initial_lives: "3"
  game.properties: |
    enemy.types=aliens,monsters
    player.maximum-lives=5
