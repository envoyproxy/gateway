# Copy from https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/base/manifests.yaml
# This file contains the base resources that most conformance tests will rely
# on. This includes 3 namespaces along with Gateways, Services and Deployments
# that can be used as backends for routing traffic. The most important
# resources included are the Gateways (all in the gateway-conformance-infra
# namespace):
# - same-namespace (only supports route in same ns)
# - all-namespaces (supports routes in all ns)
# - backend-namespaces (supports routes in ns with backend label)
apiVersion: v1
kind: Namespace
metadata:
  name: gateway-conformance-infra
  labels:
    gateway-conformance: infra
---
apiVersion: gateway.networking.k8s.io/v1
kind: Gateway
metadata:
  name: same-namespace
  namespace: gateway-conformance-infra
spec:
  gatewayClassName: "{GATEWAY_CLASS_NAME}"
  listeners:
  - name: http
    port: 80
    protocol: HTTP
    allowedRoutes:
      namespaces:
        from: Same
---
apiVersion: gateway.networking.k8s.io/v1
kind: Gateway
metadata:
  name: all-namespaces
  namespace: gateway-conformance-infra
spec:
  gatewayClassName: "{GATEWAY_CLASS_NAME}"
  listeners:
  - name: http
    port: 80
    protocol: HTTP
    allowedRoutes:
      namespaces:
        from: All
---
apiVersion: gateway.networking.k8s.io/v1
kind: Gateway
metadata:
  name: backend-namespaces
  namespace: gateway-conformance-infra
spec:
  gatewayClassName: "{GATEWAY_CLASS_NAME}"
  listeners:
  - name: http
    port: 80
    protocol: HTTP
    allowedRoutes:
      namespaces:
        from: Selector
        selector:
          matchLabels:
            gateway-conformance: backend
---
apiVersion: gateway.networking.k8s.io/v1beta1
kind: Gateway
metadata:
  name: my-tcp-gateway
  namespace: gateway-conformance-infra
spec:
  gatewayClassName: "{GATEWAY_CLASS_NAME}"
  listeners:
  - name: foo
    protocol: TCP
    port: 8080
    allowedRoutes:
      kinds:
      - kind: TCPRoute
  - name: bar
    protocol: TCP
    port: 8090
    allowedRoutes:
      kinds:
      - kind: TCPRoute
---
apiVersion: v1
kind: Service
metadata:
  name: infra-backend-v1
  namespace: gateway-conformance-infra
spec:
  selector:
    app: infra-backend-v1
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: infra-backend-v1
  namespace: gateway-conformance-infra
  labels:
    app: infra-backend-v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: infra-backend-v1
  template:
    metadata:
      labels:
        app: infra-backend-v1
    spec:
      containers:
      - name: infra-backend-v1
        # From https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/echo-basic/echo-basic.go
        image: gcr.io/k8s-staging-gateway-api/echo-basic:v20231214-v1.0.0-140-gf544a46e
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: SERVICE_NAME
          value: infra-backend-v1
        resources:
          requests:
            cpu: 10m
---
apiVersion: v1
kind: Service
metadata:
  name: infra-backend-v2
  namespace: gateway-conformance-infra
spec:
  selector:
    app: infra-backend-v2
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: infra-backend-v2
  namespace: gateway-conformance-infra
  labels:
    app: infra-backend-v2
spec:
  replicas: 2
  selector:
    matchLabels:
      app: infra-backend-v2
  template:
    metadata:
      labels:
        app: infra-backend-v2
    spec:
      containers:
      - name: infra-backend-v2
        image: gcr.io/k8s-staging-gateway-api/echo-basic:v20231214-v1.0.0-140-gf544a46e
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: SERVICE_NAME
          value: infra-backend-v2
        resources:
          requests:
            cpu: 10m
---
apiVersion: v1
kind: Service
metadata:
  name: infra-backend-v3
  namespace: gateway-conformance-infra
spec:
  selector:
    app: infra-backend-v3
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: infra-backend-v3
  namespace: gateway-conformance-infra
  labels:
    app: infra-backend-v3
spec:
  replicas: 2
  selector:
    matchLabels:
      app: infra-backend-v3
  template:
    metadata:
      labels:
        app: infra-backend-v3
    spec:
      containers:
      - name: infra-backend-v3
        image: gcr.io/k8s-staging-gateway-api/echo-basic:v20231214-v1.0.0-140-gf544a46e
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: SERVICE_NAME
          value: infra-backend-v3
        resources:
          requests:
            cpu: 10m
---
apiVersion: v1
kind: Service
metadata:
  name: tls-backend
  namespace: gateway-conformance-infra
spec:
  selector:
    app: tls-backend
  ports:
  - protocol: TCP
    port: 443
    targetPort: 8443
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tls-backend
  namespace: gateway-conformance-infra
  labels:
    app: tls-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tls-backend
  template:
    metadata:
      labels:
        app: tls-backend
    spec:
      containers:
      - name: tls-backend
        image: gcr.io/k8s-staging-gateway-api/echo-basic:v20231214-v1.0.0-140-gf544a46e
        volumeMounts:
        - name: secret-volume
          mountPath: /etc/secret-volume
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: SERVICE_NAME
          value: tls-backend
        - name: TLS_SERVER_CERT
          value: /etc/secret-volume/crt
        - name: TLS_SERVER_PRIVKEY
          value: /etc/secret-volume/key
        resources:
          requests:
            cpu: 10m
      volumes:
      - name: secret-volume
        secret:
          secretName: tls-passthrough-checks-certificate
          items:
          - key: tls.crt
            path: crt
          - key: tls.key
            path: key
---
apiVersion: v1
kind: Namespace
metadata:
  name: gateway-conformance-app-backend
  labels:
    gateway-conformance: backend
---
apiVersion: v1
kind: Service
metadata:
  name: app-backend-v1
  namespace: gateway-conformance-app-backend
spec:
  selector:
    app: app-backend-v1
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-backend-v1
  namespace: gateway-conformance-app-backend
  labels:
    app: app-backend-v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: app-backend-v1
  template:
    metadata:
      labels:
        app: app-backend-v1
    spec:
      containers:
      - name: app-backend-v1
        image: gcr.io/k8s-staging-gateway-api/echo-basic:v20231214-v1.0.0-140-gf544a46e
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: SERVICE_NAME
          value: app-backend-v1
        resources:
          requests:
            cpu: 10m
---
apiVersion: v1
kind: Service
metadata:
  name: app-backend-v2
  namespace: gateway-conformance-app-backend
spec:
  selector:
    app: app-backend-v2
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-backend-v2
  namespace: gateway-conformance-app-backend
  labels:
    app: app-backend-v2
spec:
  replicas: 2
  selector:
    matchLabels:
      app: app-backend-v2
  template:
    metadata:
      labels:
        app: app-backend-v2
    spec:
      containers:
      - name: app-backend-v2
        image: gcr.io/k8s-staging-gateway-api/echo-basic:v20231214-v1.0.0-140-gf544a46e
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: SERVICE_NAME
          value: app-backend-v2
        resources:
          requests:
            cpu: 10m
---
apiVersion: v1
kind: Namespace
metadata:
  name: gateway-conformance-web-backend
  labels:
    gateway-conformance: backend
---
apiVersion: v1
kind: Service
metadata:
  name: web-backend
  namespace: gateway-conformance-web-backend
spec:
  selector:
    app: web-backend
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-backend
  namespace: gateway-conformance-web-backend
  labels:
    app: web-backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: web-backend
  template:
    metadata:
      labels:
        app: web-backend
    spec:
      containers:
      - name: web-backend
        image: gcr.io/k8s-staging-gateway-api/echo-basic:v20231214-v1.0.0-140-gf544a46e
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: SERVICE_NAME
          value: web-backend
        resources:
          requests:
            cpu: 10m
---
apiVersion: v1
kind: Namespace
metadata:
  name: gateway-conformance-udp
  labels:
    gateway-conformance: udp
---
apiVersion: v1
kind: Service
metadata:
  name: coredns
  namespace: gateway-conformance-udp
  labels:
    app: udp
spec:
  ports:
  - name: udp-dns
    port: 53
    protocol: UDP
    targetPort: 53
  selector:
    app: udp
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: coredns
  namespace: gateway-conformance-udp
  labels:
    app: udp
spec:
  selector:
    matchLabels:
      app: udp
  template:
    metadata:
      labels:
        app: udp
    spec:
      containers:
      - args:
        - -conf
        - /root/Corefile
        image: coredns/coredns
        name: coredns
        volumeMounts:
        - mountPath: /root
          name: conf
      volumes:
      - configMap:
          defaultMode: 420
          name: coredns
        name: conf
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: coredns
  namespace: gateway-conformance-udp
data:
  Corefile: |
    .:53 {
        forward . 8.8.8.8 9.9.9.9
        log
        errors
    }

    foo.bar.com:53 {
      whoami
    }
---
apiVersion: gateway.networking.k8s.io/v1beta1
kind: Gateway
metadata:
  name: udp-gateway
  namespace: gateway-conformance-udp
spec:
  gatewayClassName: "{GATEWAY_CLASS_NAME}"
  listeners:
  - name: coredns
    protocol: UDP
    port: 5300
    allowedRoutes:
      kinds:
      - kind: UDPRoute
---
apiVersion: v1
kind: Namespace
metadata:
  name: gateway-preserve-case-backend
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: go-server
  namespace: gateway-preserve-case-backend
data:
  go.mod: |
         module srvr
         go 1.21.3
         require (
         	github.com/andybalholm/brotli v1.0.5 // indirect
         	github.com/klauspost/compress v1.17.0 // indirect
         	github.com/valyala/bytebufferpool v1.0.0 // indirect
         	github.com/valyala/fasthttp v1.51.0 // indirect
         )
  go.sum: |
         github.com/andybalholm/brotli v1.0.5 h1:8uQZIdzKmjc/iuPu7O2ioW48L81FgatrcpfFmiq/cCs=
         github.com/andybalholm/brotli v1.0.5/go.mod h1:fO7iG3H7G2nSZ7m0zPUDn85XEX2GTukHGRSepvi9Eig=
         github.com/klauspost/compress v1.17.0 h1:Rnbp4K9EjcDuVuHtd0dgA4qNuv9yKDYKK1ulpJwgrqM=
         github.com/klauspost/compress v1.17.0/go.mod h1:ntbaceVETuRiXiv4DpjP66DpAtAGkEQskQzEyD//IeE=
         github.com/valyala/bytebufferpool v1.0.0 h1:GqA5TC/0021Y/b9FG4Oi9Mr3q7XYx6KllzawFIhcdPw=
         github.com/valyala/bytebufferpool v1.0.0/go.mod h1:6bBcMArwyJ5K/AmCkWv1jt77kVWyCJ6HpOuEn7z0Csc=
         github.com/valyala/fasthttp v1.51.0 h1:8b30A5JlZ6C7AS81RsWjYMQmrZG6feChmgAolCl1SqA=
         github.com/valyala/fasthttp v1.51.0/go.mod h1:oI2XroL+lI7vdXyYoQk03bXBThfFl2cVdIA3Xl7cH8g=
  main.go: |
         package main
         import (
         	"encoding/json"
         	"fmt"
         	"log"
         	"github.com/valyala/fasthttp"
         )
         func HandleFastHTTP(ctx *fasthttp.RequestCtx) {
         	ctx.QueryArgs().VisitAll(func(key, value []byte) {
         		if string(key) == "headers" {
         			ctx.Response.Header.Add(string(value), "PrEsEnT")
         		}
         	})
         	headers := map[string][]string{}
         	ctx.Request.Header.VisitAll(func(key, value []byte) {
         		headers[string(key)] = append(headers[string(key)], string(value))
         	})
         	if d, err := json.MarshalIndent(headers, "", "  "); err != nil {
         		ctx.Error(fmt.Sprintf("%s", err), fasthttp.StatusBadRequest)
         	} else {
         		fmt.Fprintf(ctx, string(d)+"\n")
         	}
         }
         func main() {
         	s := fasthttp.Server{
         		Handler:                       HandleFastHTTP,
         		DisableHeaderNamesNormalizing: true,
         	}
            log.Printf("Starting on port 8000")
         	log.Fatal(s.ListenAndServe(":8000"))
         }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: golang-app-deployment
  namespace: gateway-preserve-case-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: golang-app
  template:
    metadata:
      labels:
        app: golang-app
    spec:
      containers:
      - name: golang-app-container
        command:
        - sh
        - "-c"
        - "cp -a /app /app-live && cd /app-live && go  run . "
        image: golang:1.21.3-alpine
        ports:
        - containerPort: 8000
        volumeMounts:
        - name: go-server
          mountPath: /app
      volumes:
      - name: go-server
        configMap:
          name: go-server
---
apiVersion: v1
kind: Service
metadata:
  name: fasthttp-backend
  namespace: gateway-preserve-case-backend
spec:
  selector:
    app: golang-app
  ports:
  - protocol: TCP
    port: 8000
    targetPort: 8000
---
apiVersion: v1
kind: Namespace
metadata:
  name: gateway-conformance-https
  labels:
    gateway-conformance: http3
---
apiVersion: v1
kind: Secret
metadata:
  name: http3-secret
  namespace: gateway-conformance-https
type: kubernetes.io/tls
data:
  tls.crt: |
    LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURQekNDQWllZ0F3SUJBZ0lCQURBTkJna3Fo
    a2lHOXcwQkFRc0ZBREF0TVJVd0V3WURWUVFLREF4bGVHRnQKY0d4bElFbHVZeTR4RkRBU0JnTlZC
    QU1NQzJWNFlXMXdiR1V1WTI5dE1CNFhEVEkwTURNd01qRTRNakV3TUZvWApEVEkxTURNd01qRTRN
    akV3TUZvd09URVlNQllHQTFVRUF3d1BkM2QzTG1WNFlXMXdiR1V1WTI5dE1SMHdHd1lEClZRUUtE
    QlJsZUdGdGNHeGxJRzl5WjJGdWFYcGhkR2x2YmpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdn
    RVAKQURDQ0FRb0NnZ0VCQUx4eXVkRlRCZ3pMTGVtbTRTVlkvN2lRMUI3QVFMeHUxSVFTbG5zTFI0
    YWowL2c2eHpQbwpXbWd0dWxBUHZWUTJEREYyc3oxbE5WODFpL2xrYzh6bjIwdlFwK0hpSUEvd0Qv
    US9zNUhKcHQ0V2kyNmd2L29DCkpTSG5oQXZzYzNraGViMDhBVHhtdFIrU2hkaVN5dExwVGtVUlpP
    WVBvdTZvWlBpN1c0NG56UVh6RVhBVXhxUWEKbmt2U040VUFCQnRteUUyMlJqNXh6bnBkQ09KYzNS
    T1BIb1lESHVnVkpFQUZJV0RPeUZnUFlnZTJPRTh0eHZURAo0eUNwNlBRdUtGbWxnbElkYnBTY01i
    YTZFOWw0Y2pLSlUxdzdMSHl6azd1UXdiYlR1WlNGVUJ2OHBFbDVEVWlUCjJYVDhmN1ArWS9DVTJS
    MllYTkpORVVONDY0a3JQUWllM0kwQ0F3RUFBYU5lTUZ3d0dnWURWUjBSQkJNd0VZSVAKZDNkM0xt
    VjRZVzF3YkdVdVkyOXRNQjBHQTFVZERnUVdCQlIybnJJRU1NQys1MEVQaDBZaU05ckxIRWF5T2pB
    ZgpCZ05WSFNNRUdEQVdnQlFYZWc5SEY3VElSSFVXT3NGNWRkMG02OHpieFRBTkJna3Foa2lHOXcw
    QkFRc0ZBQU9DCkFRRUFCcFRtYmV4T2d4VnJOUVMremdtWVMyS1FnS0k5YjhPSjZTVmdrZ1M5V25Z
    QmhuSlpzNXNOTWI0TytzZ2UKTzczdVVTemJ4UUJtNnA2MVlzMzhoR1o5TWxHS0I3QjRkOWJoM1pE
    WSt3elpCSEdKSEFYNTF2Y2NydE94UFBveAplM0tnTlpzeDFHK29VN1IvT0VSTHRqVkJZdEhRdmxK
    Z25oWGV5OUJxREVlZkZVODR5VnpzRVgwZnd6ZkdyUVl2ClJJSkdzOEpzcjFiUCtiT1RnZ2dHcVFK
    Tld6ZHZtYzEzTHlGSFN2SUxrVlIyOEJwSjRSNmZ3K0Q4dzFRRmxFc20KZ2R3aXJORVNtMUNRQmZp
    ZXpiQ3luRCswYlZhSzZpU2YrUThYZFBDdHdUZ2lKNEpNVVIrVTRaNFVqczk5UEFQRwpLZkNPeU9w
    Sm8vdkRicC9DdWlQOUcrSHl4Zz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: |
    LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2d0lCQURBTkJna3Foa2lHOXcwQkFRRUZB
    QVNDQktrd2dnU2xBZ0VBQW9JQkFRQzhjcm5SVXdZTXl5M3AKcHVFbFdQKzRrTlFld0VDOGJ0U0VF
    cFo3QzBlR285UDRPc2N6NkZwb0xicFFENzFVTmd3eGRyTTlaVFZmTll2NQpaSFBNNTl0TDBLZmg0
    aUFQOEEvMFA3T1J5YWJlRm90dW9MLzZBaVVoNTRRTDdITjVJWG05UEFFOFpyVWZrb1hZCmtzclM2
    VTVGRVdUbUQ2THVxR1Q0dTF1T0o4MEY4eEZ3Rk1ha0dwNUwwamVGQUFRYlpzaE50a1krY2M1NlhR
    amkKWE4wVGp4NkdBeDdvRlNSQUJTRmd6c2hZRDJJSHRqaFBMY2IwdytNZ3FlajBMaWhacFlKU0hX
    NlVuREcydWhQWgplSEl5aVZOY095eDhzNU83a01HMjA3bVVoVkFiL0tSSmVRMUlrOWwwL0grei9t
    UHdsTmtkbUZ6U1RSRkRlT3VKCkt6MEludHlOQWdNQkFBRUNnZ0VBQnBJUzZHY3RLOEVyUTkxbG85
    Y1ZwQkZOMHZNN2lnaTEwRnpKMXRialYxZXQKYkx2Sm8wN29NS1J0ei9lSkdNaUJYUXZkMWVWbHRo
    TXo5VWxaQUFJU2FrNnI4OXM1VmtCYVdGY01qSEVlVE5udApxMTJXZjI5eS8waHJ2YndlVjNXRmox
    Z093MEtZcC9xRWlUTWNnWE1hRFM2WWxENzF3U3M3eVhsRUNPUVJYOFIxCkRoTGJnWTU2ejY3U3BP
    VWpTOFMzenpsbGFUNjV1NnI0bWdRKzFCRUpOWHpoWkd0cDNPa0dqUnk3elhuV3llTXUKTWF2allC
    eVJZd2NFVDYrS2ZxN2M4dWJLWDIzOWRiZy9rckNUMmNPa0NFdjR6Qm12b0NzRnBLVXRlamwxczlr
    MQo2M2xwTjhNSmU3cDZ6QXJ4eTB3dndSdEdHR0pGc0VuUnM2Q2JBOUZ3ZndLQmdRRGV5a1NkdWdU
    TEtvdWRuMVdSCnNXbkV0cy9WaGxySENPaUtJL2ZiaWZMTmQyaDkxM3dMSlVXcTN1eVVhSk5LelVY
    QzhqdFE2ZVZFVGZrSmduZDEKY1Y1SkFZc1hDTm9WRnduaXhDZ0U3NkpxaW5WU3gxNnhIWXJxUlNH
    R2pkMGxmRmNBM1F4anNWUWgyQ1VtUjJSWQp0WmMvSkdDQVdRN0VPR2xIblBVcUo0Smo1d0tCZ1FE
    WWlmV0hodEdrOUd5VlRhM3lUdmlldkUyNzlOb0wzMU84ClZxTjArWjRIdnVwa25UNU1BS1luOTBD
    eDZscjg0Q0VkY1dSRGpGeEJnNXVDUm5waHRSaUNDcU1kc0dKSC94bUsKWXlhMDRBMFlUOURaMmk4
    T3FYazNGWlFJZVJhT3h2clZFSlhvbHRRSENZbzRoRGFjTkQ4MHdwMmVoc28rZ3loeQp5M3pVYUFT
    dGF3S0JnUUNub0l5c0dEQlBKUDNUWlBVZkg5dXk5TkcvbU0xb2dCMW5BdFVVeStCeUUrdjg4MHNU
    Cm44R2haUVdnVEdhMm0yaG4yNVlodFRxWmdBbG16RkZSZmpFd3dRYUVHRmJ1RTEyT3o0UkU0b0RU
    cE1YTnVOQlkKZHgvMFVIdC9IL0pLcUJsV1B2dDVidzBjUWVNQndDbVNUVjgxVlF0K3hvTkR4Q1lD
    aWVnMUJYRW45UUtCZ1FDeApESFFONE9Udkc4N2djTWdtRS8zaVJCTEcrSmVFRjVEdXNHUXIwNkVy
    c2lVU0tTTnpueUE4RTBUNWM2WDdsd0pjCmdZYzZWN3hpOE1tb3hobHdaRkxxbU9udjczVWNhdTht
    SUpYWVZFMUFzSm9TVmZ3ZDMrRzFjVlk5YTB4UFoxQlYKLzU2aXN4Z2Z2T1FmKzdKdkc2VUdiWTNV
    dlY4RnA5WGRycFdkVW9Ob2l3S0JnUURlQjgvRzhMRyt4MlEwYUFkWgpteHFrQTQzYUtoQ01WZjFh
    WVF0S3cwVDU0czNkdUNDTkY1cGJQeHpZWTFUeVNRS0ljS1hFZlBiRWhFdUZOTXpICnVRV0ZOT1Zh
    VjRST25lWkNIVGFZbTRFekQ5SWJVRktEZXlpVW0zZXVaRG85dm16VldZd2ZyVUQwOXc3ZFRKTWYK
    MmExcG5RVm84bVlCaFFCdFI2Tk9jTmtFQlE9PQotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tCg==
---
apiVersion: gateway.networking.k8s.io/v1beta1
kind: Gateway
metadata:
  name: http3-gateway
  namespace: gateway-conformance-https
spec:
  gatewayClassName: "{GATEWAY_CLASS_NAME}"
  listeners:
  - name: https
    protocol: HTTPS
    port: 443
    tls:
      mode: Terminate
      certificateRefs:
      - kind: Secret
        name: http3-secret
        namespace: gateway-conformance-https
  - name: http
    protocol: HTTP
    port: 80
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: http3-backend
  namespace: gateway-conformance-https
---
apiVersion: v1
kind: Service
metadata:
  name: http3-backend
  namespace: gateway-conformance-https
  labels:
    service: http3-backend
    app: http3-backend
spec:
  ports:
  - name: http3
    port: 3000
    targetPort: 3000
  selector:
    app: http3-backend
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: http3-backend
  namespace: gateway-conformance-https
spec:
  replicas: 1
  selector:
    matchLabels:
      app: http3-backend
      version: v1
  template:
    metadata:
      labels:
        app: http3-backend
        version: v1
    spec:
      serviceAccountName: http3-backend
      containers:
      - image: gcr.io/k8s-staging-gateway-api/echo-basic:v20231214-v1.0.0-140-gf544a46e
        imagePullPolicy: IfNotPresent
        name: backend
        ports:
        - containerPort: 3000
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
