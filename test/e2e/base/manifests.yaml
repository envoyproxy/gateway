# Copy from https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/base/manifests.yaml
# This file contains the base resources that most conformance tests will rely
# on. This includes 3 namespaces along with Gateways, Services and Deployments
# that can be used as backends for routing traffic. The most important
# resources included are the Gateways (all in the gateway-conformance-infra
# namespace):
# - same-namespace (only supports route in same ns)
# - all-namespaces (supports routes in all ns)
# - backend-namespaces (supports routes in ns with backend label)
apiVersion: v1
kind: Namespace
metadata:
  name: gateway-conformance-infra
  labels:
    gateway-conformance: infra
---
apiVersion: gateway.networking.k8s.io/v1
kind: Gateway
metadata:
  name: same-namespace
  namespace: gateway-conformance-infra
spec:
  gatewayClassName: "{GATEWAY_CLASS_NAME}"
  listeners:
  - name: http
    port: 80
    protocol: HTTP
    allowedRoutes:
      namespaces:
        from: Same
---
apiVersion: gateway.networking.k8s.io/v1
kind: Gateway
metadata:
  name: all-namespaces
  namespace: gateway-conformance-infra
spec:
  gatewayClassName: "{GATEWAY_CLASS_NAME}"
  listeners:
  - name: http
    port: 80
    protocol: HTTP
    allowedRoutes:
      namespaces:
        from: All
---
apiVersion: gateway.networking.k8s.io/v1
kind: Gateway
metadata:
  name: backend-namespaces
  namespace: gateway-conformance-infra
spec:
  gatewayClassName: "{GATEWAY_CLASS_NAME}"
  listeners:
  - name: http
    port: 80
    protocol: HTTP
    allowedRoutes:
      namespaces:
        from: Selector
        selector:
          matchLabels:
            gateway-conformance: backend
---
apiVersion: gateway.networking.k8s.io/v1beta1
kind: Gateway
metadata:
  name: my-tcp-gateway
  namespace: gateway-conformance-infra
spec:
  gatewayClassName: "{GATEWAY_CLASS_NAME}"
  listeners:
  - name: foo
    protocol: TCP
    port: 8080
    allowedRoutes:
      kinds:
      - kind: TCPRoute
  - name: bar
    protocol: TCP
    port: 8090
    allowedRoutes:
      kinds:
      - kind: TCPRoute
---
apiVersion: v1
kind: Service
metadata:
  name: infra-backend-v1
  namespace: gateway-conformance-infra
spec:
  selector:
    app: infra-backend-v1
  ports:
  - protocol: TCP
    port: 8080
    name: http11
    targetPort: 3000
  - protocol: TCP
    port: 8081
    name: http2
    targetPort: 3001
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: infra-backend-v1
  namespace: gateway-conformance-infra
  labels:
    app: infra-backend-v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: infra-backend-v1
  template:
    metadata:
      labels:
        app: infra-backend-v1
    spec:
      containers:
      - name: infra-backend-v1
        # From https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/echo-basic/echo-basic.go
        image: gcr.io/k8s-staging-gateway-api/echo-basic:v20231214-v1.0.0-140-gf544a46e
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: SERVICE_NAME
          value: infra-backend-v1
        resources:
          requests:
            cpu: 10m
---
apiVersion: v1
kind: Service
metadata:
  name: infra-backend-v2
  namespace: gateway-conformance-infra
spec:
  selector:
    app: infra-backend-v2
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: infra-backend-v2
  namespace: gateway-conformance-infra
  labels:
    app: infra-backend-v2
spec:
  replicas: 2
  selector:
    matchLabels:
      app: infra-backend-v2
  template:
    metadata:
      labels:
        app: infra-backend-v2
    spec:
      containers:
      - name: infra-backend-v2
        image: gcr.io/k8s-staging-gateway-api/echo-basic:v20231214-v1.0.0-140-gf544a46e
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: SERVICE_NAME
          value: infra-backend-v2
        resources:
          requests:
            cpu: 10m
---
apiVersion: v1
kind: Service
metadata:
  name: infra-backend-v3
  namespace: gateway-conformance-infra
spec:
  selector:
    app: infra-backend-v3
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: infra-backend-v3
  namespace: gateway-conformance-infra
  labels:
    app: infra-backend-v3
spec:
  replicas: 2
  selector:
    matchLabels:
      app: infra-backend-v3
  template:
    metadata:
      labels:
        app: infra-backend-v3
    spec:
      containers:
      - name: infra-backend-v3
        image: gcr.io/k8s-staging-gateway-api/echo-basic:v20231214-v1.0.0-140-gf544a46e
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: SERVICE_NAME
          value: infra-backend-v3
        resources:
          requests:
            cpu: 10m
---
apiVersion: v1
kind: Service
metadata:
  name: tls-backend
  namespace: gateway-conformance-infra
spec:
  selector:
    app: tls-backend
  ports:
  - protocol: TCP
    port: 443
    targetPort: 8443
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tls-backend
  namespace: gateway-conformance-infra
  labels:
    app: tls-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tls-backend
  template:
    metadata:
      labels:
        app: tls-backend
    spec:
      containers:
      - name: tls-backend
        image: gcr.io/k8s-staging-gateway-api/echo-basic:v20231214-v1.0.0-140-gf544a46e
        volumeMounts:
        - name: secret-volume
          mountPath: /etc/secret-volume
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: SERVICE_NAME
          value: tls-backend
        - name: TLS_SERVER_CERT
          value: /etc/secret-volume/crt
        - name: TLS_SERVER_PRIVKEY
          value: /etc/secret-volume/key
        resources:
          requests:
            cpu: 10m
      volumes:
      - name: secret-volume
        secret:
          secretName: tls-passthrough-checks-certificate
          items:
          - key: tls.crt
            path: crt
          - key: tls.key
            path: key
---
apiVersion: v1
kind: Namespace
metadata:
  name: gateway-conformance-app-backend
  labels:
    gateway-conformance: backend
---
apiVersion: v1
kind: Service
metadata:
  name: app-backend-v1
  namespace: gateway-conformance-app-backend
spec:
  selector:
    app: app-backend-v1
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-backend-v1
  namespace: gateway-conformance-app-backend
  labels:
    app: app-backend-v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: app-backend-v1
  template:
    metadata:
      labels:
        app: app-backend-v1
    spec:
      containers:
      - name: app-backend-v1
        image: gcr.io/k8s-staging-gateway-api/echo-basic:v20231214-v1.0.0-140-gf544a46e
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: SERVICE_NAME
          value: app-backend-v1
        resources:
          requests:
            cpu: 10m
---
apiVersion: v1
kind: Service
metadata:
  name: app-backend-v2
  namespace: gateway-conformance-app-backend
spec:
  selector:
    app: app-backend-v2
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-backend-v2
  namespace: gateway-conformance-app-backend
  labels:
    app: app-backend-v2
spec:
  replicas: 2
  selector:
    matchLabels:
      app: app-backend-v2
  template:
    metadata:
      labels:
        app: app-backend-v2
    spec:
      containers:
      - name: app-backend-v2
        image: gcr.io/k8s-staging-gateway-api/echo-basic:v20231214-v1.0.0-140-gf544a46e
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: SERVICE_NAME
          value: app-backend-v2
        resources:
          requests:
            cpu: 10m
---
apiVersion: v1
kind: Namespace
metadata:
  name: gateway-conformance-web-backend
  labels:
    gateway-conformance: backend
---
apiVersion: v1
kind: Service
metadata:
  name: web-backend
  namespace: gateway-conformance-web-backend
spec:
  selector:
    app: web-backend
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-backend
  namespace: gateway-conformance-web-backend
  labels:
    app: web-backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: web-backend
  template:
    metadata:
      labels:
        app: web-backend
    spec:
      containers:
      - name: web-backend
        image: gcr.io/k8s-staging-gateway-api/echo-basic:v20231214-v1.0.0-140-gf544a46e
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: SERVICE_NAME
          value: web-backend
        resources:
          requests:
            cpu: 10m
---
apiVersion: v1
kind: Namespace
metadata:
  name: gateway-conformance-udp
  labels:
    gateway-conformance: udp
---
apiVersion: v1
kind: Service
metadata:
  name: coredns
  namespace: gateway-conformance-udp
  labels:
    app: udp
spec:
  ports:
  - name: udp-dns
    port: 53
    protocol: UDP
    targetPort: 53
  selector:
    app: udp
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: coredns
  namespace: gateway-conformance-udp
  labels:
    app: udp
spec:
  selector:
    matchLabels:
      app: udp
  template:
    metadata:
      labels:
        app: udp
    spec:
      containers:
      - args:
        - -conf
        - /root/Corefile
        image: coredns/coredns
        name: coredns
        volumeMounts:
        - mountPath: /root
          name: conf
      volumes:
      - configMap:
          defaultMode: 420
          name: coredns
        name: conf
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: coredns
  namespace: gateway-conformance-udp
data:
  Corefile: |
    .:53 {
        forward . 8.8.8.8 9.9.9.9
        log
        errors
    }

    foo.bar.com:53 {
      whoami
    }
---
apiVersion: gateway.networking.k8s.io/v1beta1
kind: Gateway
metadata:
  name: udp-gateway
  namespace: gateway-conformance-udp
spec:
  gatewayClassName: "{GATEWAY_CLASS_NAME}"
  listeners:
  - name: coredns
    protocol: UDP
    port: 5300
    allowedRoutes:
      kinds:
      - kind: UDPRoute
---
apiVersion: v1
kind: Namespace
metadata:
  name: gateway-preserve-case-backend
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: go-server
  namespace: gateway-preserve-case-backend
data:
  go.mod: |
         module srvr
         go 1.22
         require (
         	github.com/andybalholm/brotli v1.0.5 // indirect
         	github.com/klauspost/compress v1.17.0 // indirect
         	github.com/valyala/bytebufferpool v1.0.0 // indirect
         	github.com/valyala/fasthttp v1.51.0 // indirect
         )
  go.sum: |
         github.com/andybalholm/brotli v1.0.5 h1:8uQZIdzKmjc/iuPu7O2ioW48L81FgatrcpfFmiq/cCs=
         github.com/andybalholm/brotli v1.0.5/go.mod h1:fO7iG3H7G2nSZ7m0zPUDn85XEX2GTukHGRSepvi9Eig=
         github.com/klauspost/compress v1.17.0 h1:Rnbp4K9EjcDuVuHtd0dgA4qNuv9yKDYKK1ulpJwgrqM=
         github.com/klauspost/compress v1.17.0/go.mod h1:ntbaceVETuRiXiv4DpjP66DpAtAGkEQskQzEyD//IeE=
         github.com/valyala/bytebufferpool v1.0.0 h1:GqA5TC/0021Y/b9FG4Oi9Mr3q7XYx6KllzawFIhcdPw=
         github.com/valyala/bytebufferpool v1.0.0/go.mod h1:6bBcMArwyJ5K/AmCkWv1jt77kVWyCJ6HpOuEn7z0Csc=
         github.com/valyala/fasthttp v1.51.0 h1:8b30A5JlZ6C7AS81RsWjYMQmrZG6feChmgAolCl1SqA=
         github.com/valyala/fasthttp v1.51.0/go.mod h1:oI2XroL+lI7vdXyYoQk03bXBThfFl2cVdIA3Xl7cH8g=
  main.go: |
         package main
         import (
         	"encoding/json"
         	"fmt"
         	"log"
         	"github.com/valyala/fasthttp"
         )
         func HandleFastHTTP(ctx *fasthttp.RequestCtx) {
         	ctx.QueryArgs().VisitAll(func(key, value []byte) {
         		if string(key) == "headers" {
         			ctx.Response.Header.Add(string(value), "PrEsEnT")
         		}
         	})
         	headers := map[string][]string{}
         	ctx.Request.Header.VisitAll(func(key, value []byte) {
         		headers[string(key)] = append(headers[string(key)], string(value))
         	})
         	if d, err := json.MarshalIndent(headers, "", "  "); err != nil {
         		ctx.Error(fmt.Sprintf("%s", err), fasthttp.StatusBadRequest)
         	} else {
         		fmt.Fprintf(ctx, string(d)+"\n")
         	}
         }
         func main() {
         	s := fasthttp.Server{
         		Handler:                       HandleFastHTTP,
         		DisableHeaderNamesNormalizing: true,
         	}
            log.Printf("Starting on port 8000")
         	log.Fatal(s.ListenAndServe(":8000"))
         }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: golang-app-deployment
  namespace: gateway-preserve-case-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: golang-app
  template:
    metadata:
      labels:
        app: golang-app
    spec:
      containers:
      - name: golang-app-container
        command:
        - sh
        - "-c"
        - "cp -a /app /app-live && cd /app-live && go  run . "
        image: golang:1.22.3-alpine
        ports:
        - containerPort: 8000
        volumeMounts:
        - name: go-server
          mountPath: /app
      volumes:
      - name: go-server
        configMap:
          name: go-server
---
apiVersion: v1
kind: Service
metadata:
  name: fasthttp-backend
  namespace: gateway-preserve-case-backend
spec:
  selector:
    app: golang-app
  ports:
  - protocol: TCP
    port: 8000
    targetPort: 8000
---
apiVersion: v1
kind: Namespace
metadata:
  name: gateway-upgrade-infra
---
apiVersion: gateway.networking.k8s.io/v1
kind: Gateway
metadata:
  name: ha-gateway
  namespace: gateway-upgrade-infra
spec:
  gatewayClassName: upgrade
  listeners:
  - allowedRoutes:
      namespaces:
        from: Same
    name: http1
    port: 80
    protocol: HTTP
---
apiVersion: v1
kind: Service
metadata:
  name: infra-backend
  namespace: gateway-upgrade-infra
spec:
  selector:
    app: infra-backend
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: infra-backend
  namespace: gateway-upgrade-infra
  labels:
    app: infra-backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: infra-backend
  template:
    metadata:
      labels:
        app: infra-backend
    spec:
      containers:
      - name: infra-backend
        # From https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/echo-basic/echo-basic.go
        image: gcr.io/k8s-staging-gateway-api/echo-basic:v20231214-v1.0.0-140-gf544a46e
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: SERVICE_NAME
          value: infra-backend
        resources:
          requests:
            cpu: 10m

---
apiVersion: gateway.networking.k8s.io/v1beta1
kind: Gateway
metadata:
  name: connection-limit-gateway
  namespace: gateway-conformance-infra
spec:
  gatewayClassName: "{GATEWAY_CLASS_NAME}"
  listeners:
  - name: http
    port: 80
    protocol: HTTP
    allowedRoutes:
      namespaces:
        from: Same
